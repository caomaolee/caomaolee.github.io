<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>草帽Lee的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-23T06:23:09.537Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/03/23/%E5%93%8D%E5%BA%94%E9%93%BE%E7%9A%84%E4%BC%A0%E9%80%92/"/>
    <id>http://yoursite.com/2020/03/23/响应链的传递/</id>
    <published>2020-03-23T06:23:09.537Z</published>
    <updated>2020-03-23T06:23:09.537Z</updated>
    
    <content type="html"><![CDATA[<p>iOS响应者链、事件的传递</p><h3 id="1、响应链的传递"><a href="#1、响应链的传递" class="headerlink" title="1、响应链的传递"></a>1、响应链的传递</h3><p><a href="http://www.tuicool.com/articles/6VFn2q" target="_blank" rel="noopener">Responder一点也不神秘————iOS用户响应者链完全剖析</a>(建议全看)<br>看完上面一篇应该能完全熟悉了响应链的传递，自己可以打印一下响应链看看，代码如下：</p><pre><code>- (IBAction)click:(id)sender {    UIResponder *res = sender;    while (res) {        NSLog(@&quot;*************************************\n%@&quot;,res);        res = [res nextResponder];    }}</code></pre><h3 id="2、Hit-Test-机制"><a href="#2、Hit-Test-机制" class="headerlink" title="2、Hit-Test 机制"></a>2、Hit-Test 机制</h3><p>当用户触摸(Touch)屏幕进行交互时，系统首先要找到响应者（Responder）。系统检测到手指触摸(Touch)操作时，将Touch 以UIEvent的方式加入UIApplication事件队列中。UIApplication从事件队列中取出最新的触摸事件进行分发传递到UIWindow进行处理。UIWindow 会通过hitTest:withEvent:方法寻找触碰点所在的视图，这个过程称之为hit-test view。<br>hitTest 的顺序如下</p><pre><code>UIApplication -&gt; UIWindow -&gt; Root View -&gt; ··· -&gt; subview</code></pre><p>在顶级视图（Root View）上调用pointInside:withEvent:方法判断触摸点是否在当前视图内；</p><p>如果返回NO，那么hitTest:withEvent:返回nil；</p><p>如果返回YES，那么它会向当前视图的所有子视图发送hitTest:withEvent:消息，所有子视图的遍历顺序是从最顶层视图一直到到最底层视图，即从subviews数组的末尾向前遍历，直到有子视图返回非空对象或者全部子视图遍历完毕。</p><p>如果有subview的hitTest:withEvent:返回非空对象则A返回此对象，处理结束（注意这个过程，子视图也是根据pointInside:withEvent:的返回值来确定是返回空还是当前子视图对象的。并且这个过程中如果子视图的hidden=YES、userInteractionEnabled=NO或者alpha小于0.1都会并忽略）；</p><p>如果所有subview遍历结束仍然没有返回非空对象，则hitTest:withEvent:返回self；</p><p>系统就是这样通过hit test找到触碰到的视图(Initial View)进行响应。</p><h3 id="如果还不清楚Hit-Test-机制，看更加清晰的Hit-Test-机制-建议还不清楚的看"><a href="#如果还不清楚Hit-Test-机制，看更加清晰的Hit-Test-机制-建议还不清楚的看" class="headerlink" title="如果还不清楚Hit-Test 机制，看更加清晰的Hit-Test 机制(建议还不清楚的看)"></a>如果还不清楚Hit-Test 机制，看更加清晰的<a href="http://blog.csdn.net/air1120/article/details/49558519" target="_blank" rel="noopener">Hit-Test 机制</a>(建议还不清楚的看)</h3><h3 id="3、手势的原理及与touches系列的关系，具体的可以看iOS触摸事件传递响应之被忽视的手势识别器工作原理-建议不看也没关系，结论在下面了。"><a href="#3、手势的原理及与touches系列的关系，具体的可以看iOS触摸事件传递响应之被忽视的手势识别器工作原理-建议不看也没关系，结论在下面了。" class="headerlink" title="3、手势的原理及与touches系列的关系，具体的可以看iOS触摸事件传递响应之被忽视的手势识别器工作原理(建议不看也没关系，结论在下面了。)"></a>3、手势的原理及与touches系列的关系，具体的可以看<a href="https://www.jianshu.com/p/8dca02b4687e" target="_blank" rel="noopener">iOS触摸事件传递响应之被忽视的手势识别器工作原理</a>(建议不看也没关系，结论在下面了。)</h3><p>简而言之，就是下面这幅图了。触摸事件会优先分发给附在view的手势，在这段延迟的期间，如果手势被识别，那么view的touches系列将被立刻取消，如果没有被识别，那么会继续我们所熟知的touches系列流程。</p><h3 id="4、实际开发中常见的相关问题"><a href="#4、实际开发中常见的相关问题" class="headerlink" title="4、实际开发中常见的相关问题"></a>4、实际开发中常见的相关问题</h3><p>在实际开发中，经常会遇到视图没有响应的情况，特别是新手会经常搞不清楚状况。</p><p>一下是视图没有响应的几个情况：</p><p>1.userInteractionEnabled=NO；</p><p>2.hidden=YES；</p><p>3.alpha=0~0.01；</p><p>4.没有实现touchesBegan:withEvent:方法，直接执行touchesMove:withEvent:等方法；</p><p>5.目标视图点击区域不在父视图的Frame上 (superView背景色为clear Color的时候经常会忽略这个问题)。</p><h3 id="5、手势代理"><a href="#5、手势代理" class="headerlink" title="5、手势代理"></a>5、手势代理</h3><p><a href="https://yq.aliyun.com/articles/31481" target="_blank" rel="noopener">ios手势识别代理</a>，看这个基本上就够了。引用文章中的一段话，如下：</p><ul><li>当时做项目时这个主控制器就是RootViewController,虽然用的是ScrollView但也没考虑到导航栏的手势返回的问题 ，现在做小区宝3.0的闪购订单，用之前的就有问题了。导航栏的返回手势用不了,根据响应者链和响应事件，手势被ScrollView识别了，就到不了导航的手势识别，所以导致无法手势返回。</li></ul><p>我也曾经处理过这样的问题，不过我那时候是带有QQ的侧滑功能，主控制器用的View是ScrollView，导致不能侧滑。但是处理的方法都是一样的，自定义的ScrollView的代码重写gestureRecognizerShouldBegin方法如下，我是手势方向向右并且x轴起点小于60px的，让ScrollView的手势失效。这样就不会截获对应的事件了。但是其实看完上面，还有更简单的方法，就是让ScrollView的手势共存，但是这样可能会带来一些其它的问题。shouldRecognizeSimultaneouslyWithGestureRecognizer设置为true，不过应该要判断手势为UIScreenEdgePanGestureRecognizer时才return true，这样就可以了。</p><pre><code>- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer{    CGPoint velocity = [(UIPanGestureRecognizer *)gestureRecognizer velocityInView:self];    CGPoint location = [gestureRecognizer locationInView:self];    NSLog(@&quot;velocity.x:%f----location.x:%d&quot;,velocity.x,(int)location.x%(int)[UIScreen mainScreen].bounds.size.width);    if (velocity.x &gt; 0.0f&amp;&amp;(int)location.x%(int)[UIScreen mainScreen].bounds.size.width&lt;60) {        return NO;    }    return YES;} </code></pre><h1 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h1><h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h4><p>下面这种做法，除非你很熟悉，否则不要这么干。因为 [super touchesBegan:touches withEvent:event];会执行原来默认的操作，如果按钮本来就没有添加对应的事件。那么[[self nextResponder] touchesBegan:touches withEvent:event];和[super touchesBegan:touches withEvent:event];将会向下一响应者发送两次事件。</p><pre><code>-(void)touchesBegan:(NSSet&lt;uitouch *&gt; *)touches withEvent:(UIEvent *)event{    if (self.enableNextResponder) {        [[self nextResponder] touchesBegan:touches withEvent:event];        [super touchesBegan:touches withEvent:event];    }}</code></pre><h4 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h4><pre><code>Window　　-ViewA（能响应）　　　　-ButtonA　　　　-ViewB（不响应）</code></pre><p>假设ViewB完全覆盖在ButtonA上，结果是：<br>ViewA能触发<br>Button没反应<br>ViewB没反应</p><p>简单来说，ViewB能阻隔ButtonA的响应，但是不能阻隔ViewA的响应。假设ViewB是个遮罩，那么并不是阻隔ViewA的事件触发。</p><h4 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h4><p>一个按钮添加了点击事件到底发生了什么事儿。<br>我们有时候需要使用到一些特殊的情况，比如：<br>1、A包含B，AB都响应事件。<br>对于普通View，根据响应链，让B作为第一个响应者处理，然后B根据nextResponder传递触摸事件。<br>针对手势做分析：<br>手势不会走view的touches系列方法，但有自己的一系列touches方法，不过没有暴露出来。但是shouldRecognizeSimultaneouslyWithGestureRecognizer也可以做到。</p><p>针对UIButton的分析：<br>UIButton addTarget分析，addTarget是UIControl的方法，其实addTarget的方法原理是，UIControl对touches的触摸事件的封装。[super touchesBegan:touches withEvent:event];包括了对<br>事件的封装处理，如果重新了[super touchesBegan:touches withEvent:event];，并且里面什么都不实现，那么当前UIButton添加的addTarget所绑定的所有事件都不会触发。因为覆盖了父类UIControl的封装方法。<br>如果我想一个按钮的事件触发，并且它的下一响应者也能触发相应的事件。那么该怎么处理呢？<br>我们在按钮上处理，重写touchesBegan系列的方法，那么根据上面所说，必须要调用super的方法，并且主动像下一响应者[self nextResponder]发送touchesBegan系列的方法。</p><p>2、A包含B、C，C在B的上面，但是想让B接收事件，C不接收事件<br>这种可以这么处理，自定义C的View，重写hitTest:withEvent方法，返回nil，这样自定义C的View及其子类都不会拦截事件。这样B就可以顺利处理事件。<br>还可以把C的userInteractionEnabled设置为NO</p><p>3、A是B、C的父视图，C在B的上面，这时候，CB都处理事件。这样到底行不行？根据响应链，这样应该是不靠谱的了。在C的touches方法中调用C的touches方法，然后重写B的touches方法，但是这样怪怪的。有什么高招也请多多指教。貌似也没有这样的必要。</p><p>最后还发现了一篇一步到位的iOS响应者链的全过程：<a href="http://shellhue.github.io/2017/03/04/FlowOfUITouch/" target="_blank" rel="noopener">iOS触摸事件的流动</a>(想有更清晰的了解的看)<br>直接引用里面的一张图:  </p><p><img src="http://qingmo.ink/images/uitouchflow.png" alt="iOS响应者链"></p><p>参考资料：<br><a href="http://www.cocoachina.com/ios/20160630/16868.html" target="_blank" rel="noopener">响应者链及相关机制总结</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;iOS响应者链、事件的传递&lt;/p&gt;
&lt;h3 id=&quot;1、响应链的传递&quot;&gt;&lt;a href=&quot;#1、响应链的传递&quot; class=&quot;headerlink&quot; title=&quot;1、响应链的传递&quot;&gt;&lt;/a&gt;1、响应链的传递&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.tuico
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vi编辑工具常用命令</title>
    <link href="http://yoursite.com/2019/03/13/vi-keymap/"/>
    <id>http://yoursite.com/2019/03/13/vi-keymap/</id>
    <published>2019-03-13T07:59:25.000Z</published>
    <updated>2019-03-13T08:33:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.ibb.co/gV5mh1W/1.png" alt="vi常用命令"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.ibb.co/gV5mh1W/1.png&quot; alt=&quot;vi常用命令&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="vi" scheme="http://yoursite.com/tags/vi/"/>
    
  </entry>
  
  <entry>
    <title>Charles抓取https请求 ssl证书问题</title>
    <link href="http://yoursite.com/2018/08/21/Charles/"/>
    <id>http://yoursite.com/2018/08/21/Charles/</id>
    <published>2018-08-21T03:41:34.000Z</published>
    <updated>2018-08-28T10:50:34.819Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何使用Charles抓取https请求"><a href="#如何使用Charles抓取https请求" class="headerlink" title="如何使用Charles抓取https请求"></a>如何使用Charles抓取https请求</h3><h4 id="设置Charles"><a href="#设置Charles" class="headerlink" title="设置Charles"></a>设置Charles</h4><p>1.Charles -&gt; 工具栏 -&gt; Proxy -&gt; Proxy Setting</p><blockquote><p>1.设置Port（默认8888）<br>2.勾选 Enable Transparent HTTP Proxying    </p></blockquote><p><img src="https://image.ibb.co/dDv9tU/1.png" alt="设置Charles"></p><p>2.Charles -&gt; 工具栏 -&gt; Proxy -&gt; SSL Proxy Setting</p><blockquote><p>1.勾选Enable SSL Proxying<br>2.在Location部份选择add，抓取任意站点、443端口的数据 </p></blockquote><p><img src="https://image.ibb.co/ht8CDU/2.png" alt="设置Charles"> </p><h4 id="设置手机代理"><a href="#设置手机代理" class="headerlink" title="设置手机代理"></a>设置手机代理</h4><p>1.查看内网IP地址<br>Charles -&gt; 工具栏 -&gt; Help -&gt;Local IP Addresses<br>2.手机设置代理端口<br>3.Safari中跳转 chls.pro/ssl 下载Charles证书<br>4.设置 -&gt; 通用 -&gt; 关于本机 -&gt; 证书信任设置 -&gt; 信任Charles证书</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何使用Charles抓取https请求&quot;&gt;&lt;a href=&quot;#如何使用Charles抓取https请求&quot; class=&quot;headerlink&quot; title=&quot;如何使用Charles抓取https请求&quot;&gt;&lt;/a&gt;如何使用Charles抓取https请求&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iPhoneX适配</title>
    <link href="http://yoursite.com/2017/10/23/iPhoneX/"/>
    <id>http://yoursite.com/2017/10/23/iPhoneX/</id>
    <published>2017-10-23T05:45:25.000Z</published>
    <updated>2019-03-27T01:12:10.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-iPhone手机各版本尺寸"><a href="#一-iPhone手机各版本尺寸" class="headerlink" title="一. iPhone手机各版本尺寸"></a>一. iPhone手机各版本尺寸</h2><table><thead><tr><th>机型</th><th style="text-align:center">发布时的系统</th><th style="text-align:right">屏幕尺寸</th><th style="text-align:right">比例</th><th style="text-align:right">pt</th><th style="text-align:right">像素</th></tr></thead><tbody><tr><td>iPhone4</td><td style="text-align:center">iOS 4</td><td style="text-align:right">3.5英寸</td><td style="text-align:right">3:2</td><td style="text-align:right">320*480pt</td><td style="text-align:right">960X640</td></tr><tr><td>iPhone4S</td><td style="text-align:center">iOS 5</td><td style="text-align:right">3.5英寸</td><td style="text-align:right">3:2</td><td style="text-align:right">320*480pt</td><td style="text-align:right">960X640</td></tr><tr><td>iPhone5</td><td style="text-align:center">iOS 6</td><td style="text-align:right">4英寸</td><td style="text-align:right">16:9</td><td style="text-align:right">320*568pt</td><td style="text-align:right">1136X640</td></tr><tr><td>iPhone5C/5S</td><td style="text-align:center">iOS 7</td><td style="text-align:right">4英寸</td><td style="text-align:right">16:9</td><td style="text-align:right">320*568pt</td><td style="text-align:right">1136X640</td></tr><tr><td>iPhone6</td><td style="text-align:center">iOS 8</td><td style="text-align:right">4.7英寸</td><td style="text-align:right">16:9</td><td style="text-align:right">375*667pt</td><td style="text-align:right">1334X750</td></tr><tr><td>iPhone6Plus</td><td style="text-align:center">iOS 8</td><td style="text-align:right">5.5英寸</td><td style="text-align:right">16:9</td><td style="text-align:right">414*736pt</td><td style="text-align:right">1920X1080</td></tr><tr><td>iPhone6S</td><td style="text-align:center">iOS 9</td><td style="text-align:right">4.7英寸</td><td style="text-align:right">16:9</td><td style="text-align:right">375*667pt</td><td style="text-align:right">1334X750</td></tr><tr><td>iPhone6SPlus</td><td style="text-align:center">iOS 9</td><td style="text-align:right">5.5英寸</td><td style="text-align:right">16:9</td><td style="text-align:right">414*736pt</td><td style="text-align:right">1920X1080</td></tr><tr><td>iPhoneSE</td><td style="text-align:center">iOS 9</td><td style="text-align:right">4英寸</td><td style="text-align:right">16:9</td><td style="text-align:right">320*568pt</td><td style="text-align:right">1136X640</td></tr><tr><td>iPhone7</td><td style="text-align:center">iOS 10</td><td style="text-align:right">4.7英寸</td><td style="text-align:right">16:9</td><td style="text-align:right">375*667pt</td><td style="text-align:right">1334X750</td></tr><tr><td>iPhone7Plus</td><td style="text-align:center">iOS 10</td><td style="text-align:right">5.5英寸</td><td style="text-align:right">16:9</td><td style="text-align:right">414*736pt</td><td style="text-align:right">1920X1080</td></tr><tr><td>iPhone8</td><td style="text-align:center">iOS 11</td><td style="text-align:right">4.7英寸</td><td style="text-align:right">16:9</td><td style="text-align:right">375*667pt</td><td style="text-align:right">1334X750</td></tr><tr><td>iPhone8Plus</td><td style="text-align:center">iOS 11</td><td style="text-align:right">5.5英寸</td><td style="text-align:right">16:9</td><td style="text-align:right">414*736pt</td><td style="text-align:right">1920X1080</td></tr><tr><td>iPhoneX</td><td style="text-align:center">iOS 11</td><td style="text-align:right">5.8英寸</td><td style="text-align:right">18:9</td><td style="text-align:right">375*812pt</td><td style="text-align:right">2436X1125</td></tr><tr><td>iPhoneXs</td><td style="text-align:center">iOS 12</td><td style="text-align:right">5.8英寸</td><td style="text-align:right">18:9</td><td style="text-align:right">375*812pt</td><td style="text-align:right">2436X1125</td></tr><tr><td>iPhoneXr</td><td style="text-align:center">iOS 12</td><td style="text-align:right">6.1英寸</td><td style="text-align:right">18:9</td><td style="text-align:right">414*896pt</td><td style="text-align:right">1792X828</td></tr><tr><td>iPhoneXs Max</td><td style="text-align:center">iOS 12</td><td style="text-align:right">6.5英寸</td><td style="text-align:right">18:9</td><td style="text-align:right">414*896pt</td><td style="text-align:right">2688X1242</td></tr></tbody></table><a id="more"></a><h2 id="二-iPhoneX手机具体尺寸大小"><a href="#二-iPhoneX手机具体尺寸大小" class="headerlink" title="二. iPhoneX手机具体尺寸大小"></a>二. iPhoneX手机具体尺寸大小</h2><p><img src="/images/iPhoneX.png" alt="iPhoneX手机具体尺寸"></p><h2 id="三-iPhone-X尺寸问题"><a href="#三-iPhone-X尺寸问题" class="headerlink" title="三. iPhone X尺寸问题"></a>三. iPhone X尺寸问题</h2><ol><li>高度增加了145pt，变成812pt. </li><li>屏幕圆角显示，注意至少留10pt边距。</li><li>状态栏高度由20pt变成44pt，留意这个距离就能避开“刘海”的尴尬，相应的导航栏以上变化64—&gt;88。 </li><li>底部工具栏需要为home indicator留出34pt边距。 </li><li>物理分辨率为1125px * 2436px<ul><li>非iPhone X ：<br>StatusBar高20px，NavigationBar高44px，底部TabBar高49px</li><li>iPhone X：<br>StatusBar高44px，NavigationBar高44px，底部TabBar高83px</li></ul></li></ol><h2 id="四-适配用到的宏"><a href="#四-适配用到的宏" class="headerlink" title="四. 适配用到的宏"></a>四. 适配用到的宏</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// status bar height.</span><br><span class="line"></span><br><span class="line">#define  kStatusBarHeight      (IS_iPhoneX ? 44.f : 20.f)</span><br><span class="line"></span><br><span class="line">// Navigation bar height.</span><br><span class="line"></span><br><span class="line">#define  kNavigationBarHeight  44.f</span><br><span class="line"></span><br><span class="line">// Tabbar height.</span><br><span class="line"></span><br><span class="line">#define  kTabbarHeight        (IS_iPhoneX ? (49.f+34.f) : 49.f)</span><br><span class="line"></span><br><span class="line">// Tabbar safe bottom margin.</span><br><span class="line"></span><br><span class="line">#define  kTabbarSafeBottomMargin        (IS_iPhoneX ? 34.f : 0.f)</span><br><span class="line"></span><br><span class="line">// Status bar &amp; navigation bar height.</span><br><span class="line"></span><br><span class="line">#define  kStatusBarAndNavigationBarHeight  (IS_iPhoneX ? 88.f : 64.f)</span><br><span class="line"></span><br><span class="line">//判断是否iPhone X</span><br><span class="line"></span><br><span class="line">#define IS_iPhoneX ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)</span><br></pre></td></tr></table></figure><h2 id="五-判断iPhone设备型号"><a href="#五-判断iPhone设备型号" class="headerlink" title="五. 判断iPhone设备型号"></a>五. 判断iPhone设备型号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;sys/utsname.h&gt;</span><br><span class="line"></span><br><span class="line">+ (NSString *)deviceType</span><br><span class="line">&#123;</span><br><span class="line">    struct utsname systemInfo;</span><br><span class="line">    uname(&amp;systemInfo);</span><br><span class="line">    NSString *platform = [NSString stringWithCString:systemInfo.machine encoding:NSASCIIStringEncoding];</span><br><span class="line">    </span><br><span class="line">    //------------------------------iPhone---------------------------</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone1,1&quot;]) return @&quot;iPhone 2G&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone1,2&quot;]) return @&quot;iPhone 3G&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone2,1&quot;]) return @&quot;iPhone 3GS&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone3,1&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPhone3,2&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPhone3,3&quot;]) return @&quot;iPhone 4&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone4,1&quot;]) return @&quot;iPhone 4S&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone5,1&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPhone5,2&quot;]) return @&quot;iPhone 5&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone5,3&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPhone5,4&quot;]) return @&quot;iPhone 5c&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone6,1&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPhone6,2&quot;]) return @&quot;iPhone 5s&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone7,2&quot;]) return @&quot;iPhone 6&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone7,1&quot;]) return @&quot;iPhone 6 Plus&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone8,1&quot;]) return @&quot;iPhone 6s&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone8,2&quot;]) return @&quot;iPhone 6s Plus&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone8,4&quot;]) return @&quot;iPhone SE&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone9,1&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPhone9,3&quot;]) return @&quot;iPhone 7&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone9,2&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPhone9,4&quot;]) return @&quot;iPhone 7 Plus&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone10,1&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPhone10,4&quot;]) return @&quot;iPhone 8&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone10,2&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPhone10,5&quot;]) return @&quot;iPhone 8 Plus&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone10,3&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPhone10,6&quot;]) return @&quot;iPhone X&quot;;</span><br><span class="line"></span><br><span class="line">    //------------------------------iPad--------------------------</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad1,1&quot;]) return @&quot;iPad&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad2,1&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad2,2&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad2,3&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad2,4&quot;]) return @&quot;iPad 2&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad3,1&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad3,2&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad3,3&quot;]) return @&quot;iPad 3&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad3,4&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad3,5&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad3,6&quot;]) return @&quot;iPad 4&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad4,1&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad4,2&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad4,3&quot;]) return @&quot;iPad Air&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad5,3&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad5,4&quot;]) return @&quot;iPad Air 2&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad6,3&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad6,4&quot;]) return @&quot;iPad Pro 9.7-inch&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad6,7&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad6,8&quot;]) return @&quot;iPad Pro 12.9-inch&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad6,11&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad6,12&quot;]) return @&quot;iPad 5&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad7,1&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad7,2&quot;]) return @&quot;iPad Pro 12.9-inch 2&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad7,3&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad7,4&quot;]) return @&quot;iPad Pro 10.5-inch&quot;;</span><br><span class="line">    </span><br><span class="line">    //------------------------------iPad Mini-----------------------</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad2,5&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad2,6&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad2,7&quot;]) return @&quot;iPad mini&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad4,4&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad4,5&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad4,6&quot;]) return @&quot;iPad mini 2&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad4,7&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad4,8&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad4,9&quot;]) return @&quot;iPad mini 3&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad5,1&quot;] ||</span><br><span class="line">        [platform isEqualToString:@&quot;iPad5,2&quot;]) return @&quot;iPad mini 4&quot;;</span><br><span class="line">    </span><br><span class="line">    //------------------------------iTouch------------------------</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPod1,1&quot;]) return @&quot;iTouch&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPod2,1&quot;]) return @&quot;iTouch2&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPod3,1&quot;]) return @&quot;iTouch3&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPod4,1&quot;]) return @&quot;iTouch4&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPod5,1&quot;]) return @&quot;iTouch5&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPod7,1&quot;]) return @&quot;iTouch6&quot;;</span><br><span class="line">    </span><br><span class="line">    //------------------------------Samulitor-------------------------------------</span><br><span class="line">    if ([platform isEqualToString:@&quot;i386&quot;] || </span><br><span class="line">        [platform isEqualToString:@&quot;x86_64&quot;]) return @&quot;iPhone Simulator&quot;;</span><br><span class="line">    </span><br><span class="line">    return @&quot;Unknown&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-iPhone手机各版本尺寸&quot;&gt;&lt;a href=&quot;#一-iPhone手机各版本尺寸&quot; class=&quot;headerlink&quot; title=&quot;一. iPhone手机各版本尺寸&quot;&gt;&lt;/a&gt;一. iPhone手机各版本尺寸&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;机型&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;发布时的系统&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;屏幕尺寸&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;比例&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;pt&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;像素&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;iPhone4&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 4&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;3.5英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;3:2&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;320*480pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;960X640&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone4S&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 5&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;3.5英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;3:2&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;320*480pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;960X640&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 6&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;4英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;16:9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;320*568pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1136X640&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone5C/5S&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 7&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;4英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;16:9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;320*568pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1136X640&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 8&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;4.7英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;16:9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;375*667pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1334X750&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone6Plus&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 8&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;5.5英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;16:9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;414*736pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1920X1080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone6S&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;4.7英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;16:9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;375*667pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1334X750&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone6SPlus&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;5.5英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;16:9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;414*736pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1920X1080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhoneSE&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;4英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;16:9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;320*568pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1136X640&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone7&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 10&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;4.7英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;16:9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;375*667pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1334X750&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone7Plus&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 10&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;5.5英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;16:9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;414*736pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1920X1080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone8&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 11&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;4.7英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;16:9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;375*667pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1334X750&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone8Plus&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 11&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;5.5英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;16:9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;414*736pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1920X1080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhoneX&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 11&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;5.8英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;18:9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;375*812pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;2436X1125&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhoneXs&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 12&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;5.8英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;18:9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;375*812pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;2436X1125&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhoneXr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 12&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;6.1英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;18:9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;414*896pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1792X828&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhoneXs Max&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS 12&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;6.5英寸&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;18:9&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;414*896pt&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;2688X1242&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="iPhoneX" scheme="http://yoursite.com/tags/iPhoneX/"/>
    
  </entry>
  
  <entry>
    <title>Library not loaded问题</title>
    <link href="http://yoursite.com/2017/05/02/XcodeError/"/>
    <id>http://yoursite.com/2017/05/02/XcodeError/</id>
    <published>2017-05-02T11:48:19.000Z</published>
    <updated>2017-05-02T14:33:57.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Xcode8报错-Library-not-loaded"><a href="#Xcode8报错-Library-not-loaded" class="headerlink" title="Xcode8报错 Library not loaded:"></a>Xcode8报错 Library not loaded:</h4><h4 id="System-Library-Frameworks-UserNotifications-framework-UserNotifications"><a href="#System-Library-Frameworks-UserNotifications-framework-UserNotifications" class="headerlink" title="/System/Library/Frameworks/UserNotifications.framework/UserNotifications"></a>/System/Library/Frameworks/UserNotifications.framework/UserNotifications</h4><p>调试时Xcode报错<br><img src="/2017/05/02/XcodeError/1.png" alt=""><br>低版本手机中 UserNotifications框架不支持<br>Target下的Build Phases标签里，找到Link Binary With Libraries，在里面找到UserNotifications.framework，把status由<strong>Required</strong>修改成<strong>Optional</strong><br><img src="/2017/05/02/XcodeError/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Xcode8报错-Library-not-loaded&quot;&gt;&lt;a href=&quot;#Xcode8报错-Library-not-loaded&quot; class=&quot;headerlink&quot; title=&quot;Xcode8报错 Library not loaded:&quot;&gt;&lt;/a&gt;Xcod
      
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>WKWebView问题</title>
    <link href="http://yoursite.com/2017/04/28/WKWebView/"/>
    <id>http://yoursite.com/2017/04/28/WKWebView/</id>
    <published>2017-04-28T09:48:19.000Z</published>
    <updated>2018-08-28T09:09:14.597Z</updated>
    
    <content type="html"><![CDATA[<h4 id="WKWebView无法响应H5页面中的location-href"><a href="#WKWebView无法响应H5页面中的location-href" class="headerlink" title="WKWebView无法响应H5页面中的location.href"></a>WKWebView无法响应H5页面中的location.href</h4><p>根据WKWebView代理方法 WKNavigationDelegate拦截location.herf动作</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView decidePolicyForNavigationAction:(<span class="built_in">WKNavigationAction</span> *)navigationAction decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationActionPolicy</span>))decisionHandler &#123;</span><br><span class="line">    <span class="keyword">if</span> (![navigationAction.request.URL.absoluteString containsString:<span class="string">@"http://"</span>] &amp;&amp; ![navigationAction.request.URL.absoluteString containsString:<span class="string">@"https://"</span>]) &#123;</span><br><span class="line">       </span><br><span class="line">        &#125;</span><br><span class="line">        decisionHandler(<span class="built_in">WKNavigationActionPolicyCancel</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">        decisionHandler(<span class="built_in">WKNavigationActionPolicyAllow</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="WKWebView如何使用JS调用原生方法"><a href="#WKWebView如何使用JS调用原生方法" class="headerlink" title="WKWebView如何使用JS调用原生方法"></a>WKWebView如何使用JS调用原生方法</h4><p>1.设置WKScriptMessageHandler，注册js方法</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">WKWebViewConfiguration</span> *config = [<span class="built_in">WKWebViewConfiguration</span> new];</span><br><span class="line"> <span class="keyword">self</span>.userContent = [[<span class="built_in">WKUserContentController</span> alloc] init];</span><br><span class="line"> [<span class="keyword">self</span>.userContent addScriptMessageHandler:<span class="keyword">self</span> name:<span class="string">@"JSFuncName"</span>];</span><br><span class="line"> config.userContentController = <span class="keyword">self</span>.userContent;</span><br><span class="line"> <span class="built_in">WKWebView</span> *webv = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:<span class="built_in">CGRectZero</span> configuration:config];</span><br></pre></td></tr></table></figure><p>2.实现WKWebView的WKScriptMessageHandler代理方法</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *scriptName = message.name;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, message.body);</span><br><span class="line">    <span class="keyword">if</span>([scriptName isEqualToString:<span class="string">@"JSFuncName"</span>])&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"To Do Something"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;WKWebView无法响应H5页面中的location-href&quot;&gt;&lt;a href=&quot;#WKWebView无法响应H5页面中的location-href&quot; class=&quot;headerlink&quot; title=&quot;WKWebView无法响应H5页面中的location.
      
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>NSMutableArray删除时遇到的问题</title>
    <link href="http://yoursite.com/2016/09/20/NSMutableArrayDelete/"/>
    <id>http://yoursite.com/2016/09/20/NSMutableArrayDelete/</id>
    <published>2016-09-20T06:40:26.000Z</published>
    <updated>2019-03-27T01:12:11.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-removeObjectAtIndex和removeObject的不同之处"><a href="#一-removeObjectAtIndex和removeObject的不同之处" class="headerlink" title="一. removeObjectAtIndex和removeObject的不同之处"></a>一. removeObjectAtIndex和removeObject的不同之处</h2><blockquote><p><code>removeObjectAtIndex:</code><br> 删除指定NSMutableArray中指定index的对象，注意index不能越界。</p></blockquote><blockquote><p><code>removeObject:</code><br> 删除NSMutableArray中所有isEqual:待删对象的对象</p></blockquote><blockquote><p>从API文档可以看出，两者之间的主要区别是<code>removeObjectAtIndex:</code>最多只能删除一个对象，而<code>removeObject:</code>可以删除多个对象（只要符合isEqual:的都删除掉）。<br><a id="more"></a></p></blockquote><h2 id="二-在NSMutableArray循环中删除对象"><a href="#二-在NSMutableArray循环中删除对象" class="headerlink" title="二. 在NSMutableArray循环中删除对象"></a>二. 在NSMutableArray循环中删除对象</h2><h3 id="1-可能多删的做法"><a href="#1-可能多删的做法" class="headerlink" title="1. 可能多删的做法"></a>1. 可能多删的做法</h3><p>删除数组中的第一个@”remove”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (void)removeObjectsUseFor</span><br><span class="line">&#123;   </span><br><span class="line">    NSMutableArray *contents = [@[@&quot;how&quot;, @&quot;to&quot;, @&quot;remove&quot;, @&quot;remove&quot;, @&quot;object&quot;] mutableCopy];</span><br><span class="line">    for (NSInteger i = 0; i != contents.count; ++i) &#123;</span><br><span class="line">        NSString *var = contents[i];</span><br><span class="line">        if ([var isEqualToString:@&quot;remove&quot;]) &#123;</span><br><span class="line">            [contents removeObject:var];</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;%@&quot;, contents);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2016-09-20 21:14:13.541 RemoveObject[5862:310398] (</span><br><span class="line">    how,</span><br><span class="line">    to,</span><br><span class="line">    object</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>从<code>removeObject:</code>的说明中可以看出，<code>removeObject:</code>不仅删除该对象本身，而且删除NSMutableArray中所有<code>isEqual:</code>待删对象的对象</p></blockquote><h3 id="2-可能漏删的做法"><a href="#2-可能漏删的做法" class="headerlink" title="2. 可能漏删的做法"></a>2. 可能漏删的做法</h3><p>删除数组中所有的@”remove”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (void)removeObjectsUseFor</span><br><span class="line">&#123;   </span><br><span class="line">    NSMutableArray *contents = [@[@&quot;how&quot;, @&quot;to&quot;, @&quot;remove&quot;, @&quot;remove&quot;, @&quot;object&quot;] mutableCopy];</span><br><span class="line">    for (NSInteger i = 0; i != contents.count; ++i) &#123;</span><br><span class="line">        NSString *var = contents[i];</span><br><span class="line">        if ([var isEqualToString:@&quot;remove&quot;]) &#123;</span><br><span class="line">            [contents removeObjectAtIndex:i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;%@&quot;, contents);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2016-09-20 21:19:59.615 RemoveObject[5886:315162] (</span><br><span class="line">    how,</span><br><span class="line">    to,</span><br><span class="line">    remove,</span><br><span class="line">    object</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="3-引发崩溃的做法"><a href="#3-引发崩溃的做法" class="headerlink" title="3. 引发崩溃的做法"></a>3. 引发崩溃的做法</h3><p>删除数组中所有的@”remove”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (void)removeObjectsUseForIn</span><br><span class="line">&#123;</span><br><span class="line">    NSMutableArray *contents = [@[@&quot;how&quot;, @&quot;to&quot;, @&quot;remove&quot;, @&quot;object&quot;] mutableCopy];</span><br><span class="line">    for (NSString *var in contents) &#123;</span><br><span class="line">        if ([var isEqualToString:@&quot;remove&quot;]) &#123;</span><br><span class="line">            [contents removeObject:var];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;%@&quot;, contents);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：崩溃</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. svn (del, remove, rm)  没搞明白2016-09-20 21:27:40.337 RemoveObject[5915:321407] *** Terminating app due to uncaught exception &apos;NSGenericException&apos;, reason: &apos;*** Collection &lt;__NSArrayM: 0x7f9388c95580&gt; was mutated while being enumerated.&apos;</span><br></pre></td></tr></table></figure><blockquote><p>不要在for in 循环中删除数组内部对象。</p></blockquote><h3 id="4-正确但别扭的做法"><a href="#4-正确但别扭的做法" class="headerlink" title="4. 正确但别扭的做法"></a>4. 正确但别扭的做法</h3><p>删除数组中所有的@”remove”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (void)removeObjectsReversed</span><br><span class="line">&#123;</span><br><span class="line">    NSMutableArray *contents = [@[@&quot;how&quot;, @&quot;to&quot;, @&quot;remove&quot;, @&quot;remove&quot;, @&quot;object&quot;] mutableCopy];</span><br><span class="line">    for (NSInteger i = contents.count - 1; i &gt;= 0; --i) &#123;</span><br><span class="line">        NSString *var = contents[i];</span><br><span class="line">        if ([var isEqualToString:@&quot;remove&quot;]) &#123;</span><br><span class="line">            [contents removeObjectAtIndex:i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;%@&quot;, contents);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2016-09-20 21:31:37.655 RemoveObject[5934:325316] (</span><br><span class="line">    how,</span><br><span class="line">    to,</span><br><span class="line">    object</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>倒序删除，正确但有点别扭！</p></blockquote><h3 id="5-优雅的做法"><a href="#5-优雅的做法" class="headerlink" title="5. 优雅的做法"></a>5. 优雅的做法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (void)removeObjectsUseEnumration</span><br><span class="line">&#123;</span><br><span class="line">    NSMutableArray *contents = [@[@&quot;how&quot;, @&quot;remove&quot;, @&quot;to&quot;, @&quot;remove&quot;, @&quot;object&quot;] mutableCopy];</span><br><span class="line">    NSIndexSet *indexSet =</span><br><span class="line">        [contents indexesOfObjectsPassingTest:^BOOL(NSString *  _Nonnull var, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class="line">            return [var isEqualToString:@&quot;remove&quot;];</span><br><span class="line">        &#125;];</span><br><span class="line">    [contents removeObjectsAtIndexes:indexSet];</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;%@&quot;, indexSet);</span><br><span class="line">    NSLog(@&quot;%@&quot;, contents);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2016-09-20 22:10:42.404 RemoveObject[6014:338210] &lt;NSIndexSet: 0x7fb73a516040&gt;[number of indexes: 2 (in 2 ranges), indexes: (1 3)]</span><br><span class="line">2016-09-20 22:10:42.404 RemoveObject[6014:338210] (</span><br><span class="line">    how,</span><br><span class="line">    to,</span><br><span class="line">    object</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>先通过<code>indexesOfObjectsPassingTest:</code>把待删除对象的index找出来，再调用<code>removeObjectsAtIndexes:</code>进行一次性删除。</p></blockquote><h2 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h2><ol><li>不建议在NSMutableArray循环中使用removeObject:删除该NSMutableArray内部对象，此举可能引发误删，如2.1所示；</li><li>不建议在NSMutableArray的for in 循环中删除对象，此举可能引发崩溃，如2.3所示；</li><li>建议删除NSMutableArray内部对象时，先拿到待删对象的index，再进行一次性删除，如2.5所示。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-removeObjectAtIndex和removeObject的不同之处&quot;&gt;&lt;a href=&quot;#一-removeObjectAtIndex和removeObject的不同之处&quot; class=&quot;headerlink&quot; title=&quot;一. removeObjectAtIndex和removeObject的不同之处&quot;&gt;&lt;/a&gt;一. removeObjectAtIndex和removeObject的不同之处&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;removeObjectAtIndex:&lt;/code&gt;&lt;br&gt; 删除指定NSMutableArray中指定index的对象，注意index不能越界。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;removeObject:&lt;/code&gt;&lt;br&gt; 删除NSMutableArray中所有isEqual:待删对象的对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;从API文档可以看出，两者之间的主要区别是&lt;code&gt;removeObjectAtIndex:&lt;/code&gt;最多只能删除一个对象，而&lt;code&gt;removeObject:&lt;/code&gt;可以删除多个对象（只要符合isEqual:的都删除掉）。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="NSMutableArray" scheme="http://yoursite.com/tags/NSMutableArray/"/>
    
  </entry>
  
  <entry>
    <title>svn</title>
    <link href="http://yoursite.com/2016/07/23/SVN/"/>
    <id>http://yoursite.com/2016/07/23/SVN/</id>
    <published>2016-07-23T05:45:25.000Z</published>
    <updated>2019-03-27T01:12:11.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-查看当前文件下修改"><a href="#一-查看当前文件下修改" class="headerlink" title="一. 查看当前文件下修改"></a>一. 查看当前文件下修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn status</span><br></pre></td></tr></table></figure><h2 id="二-提交当前文件夹下修改文件"><a href="#二-提交当前文件夹下修改文件" class="headerlink" title="二. 提交当前文件夹下修改文件"></a>二. 提交当前文件夹下修改文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a. svn ci -m &quot;还原confi.h文件 &quot; Additions/heads/Config.h (单个文件)</span><br><span class="line">b. svn ci -m “添加多个文件 “空格” 间隔  text1.h  text2.h (多个文件)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="三-提交当前文件夹以及文件夹文件"><a href="#三-提交当前文件夹以及文件夹文件" class="headerlink" title="三. 提交当前文件夹以及文件夹文件"></a>三. 提交当前文件夹以及文件夹文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a. svn add APP/Classes/BankTask/TestFiles --force</span><br><span class="line">b. svn ci -m “add 新文件夹” APP/Classes/BankTask/TestFiles</span><br><span class="line">c. 如果是xcode直接拖进代码，还需要提交xcode路径，直接把代码文件放到对应的目录下是没有路径的 (切记)</span><br></pre></td></tr></table></figure><h2 id="四-删除文件或者文件夹"><a href="#四-删除文件或者文件夹" class="headerlink" title="四. 删除文件或者文件夹"></a>四. 删除文件或者文件夹</h2><ul><li>第一种</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. svn delete APP/Classes/BankTask/TestThreeFiles </span><br><span class="line">2. svn ci -m &quot;删除TestThreeFiles文件&quot; APP/Classes/BankTask/TestThreeFiles</span><br></pre></td></tr></table></figure><ul><li>第二种</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. svn (del, remove, rm)  没搞明白</span><br></pre></td></tr></table></figure><h2 id="五-更新版本"><a href="#五-更新版本" class="headerlink" title="五. 更新版本"></a>五. 更新版本</h2><p>简写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn up</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a. svn update 如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本</span><br><span class="line">b. svn update -r 200 test.php(将版本库中的文件test.php还原到版本200)</span><br><span class="line">c. svn update test.php(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先update，修改文件，然后清除svn resolved，最后再提交commit)</span><br></pre></td></tr></table></figure><h2 id="六-恢复本地修改"><a href="#六-恢复本地修改" class="headerlink" title="六. 恢复本地修改"></a>六. 恢复本地修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn revert path : 恢复原始未改变的工作副本文件 (恢复大部份的本地修改)</span><br></pre></td></tr></table></figure><blockquote><p>注意: 本子命令不会存取网络，并且会解除冲突的状况。但        是它不会恢复被删除的目录</p></blockquote><h2 id="七-解决冲突"><a href="#七-解决冲突" class="headerlink" title="七. 解决冲突"></a>七. 解决冲突</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn resolved path : 移除工作副本的目录或文件的“冲突”状态。</span><br></pre></td></tr></table></figure><blockquote><p>注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的相关文件，然后让 PATH 可以再次提交。</p></blockquote><ul><li>(1) 冲突信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. D   C removed_directory . </span><br><span class="line">2. local unversioned, incoming add upon update</span><br></pre></td></tr></table></figure><ul><li>(2) 解决方案</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. svn resolve --accept working  (removed_directory)(path) </span><br><span class="line">2. svn revert  removed_directory</span><br></pre></td></tr></table></figure><h2 id="八-将文件checkout到本地目录"><a href="#八-将文件checkout到本地目录" class="headerlink" title="八. 将文件checkout到本地目录"></a>八. 将文件checkout到本地目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a. svn checkout svn://192.168.1.1/pro/domain  简写：svn co</span><br><span class="line">b. svn checkout -r791)(指定版本) path</span><br></pre></td></tr></table></figure><h2 id="九-查看文件详细信息"><a href="#九-查看文件详细信息" class="headerlink" title="九. 查看文件详细信息"></a>九. 查看文件详细信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn info path</span><br></pre></td></tr></table></figure><blockquote><p>例如：svn info test.php</p></blockquote><h2 id="十-比较诧异"><a href="#十-比较诧异" class="headerlink" title="十. 比较诧异"></a>十. 比较诧异</h2><p>简写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn di</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn diff path(将修改的文件与基础版本比较)</span><br></pre></td></tr></table></figure><blockquote><p>例如：svn diff test.php</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn diff -r m:n path(对版本m和版本n比较差异)</span><br></pre></td></tr></table></figure><blockquote><p>例如：svn diff -r 200:201 test.php</p></blockquote><h2 id="十一-将两个版本之间的差异合并到当前文件"><a href="#十一-将两个版本之间的差异合并到当前文件" class="headerlink" title="十一. 将两个版本之间的差异合并到当前文件"></a>十一. 将两个版本之间的差异合并到当前文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a. svn merge -r m:n path</span><br></pre></td></tr></table></figure><blockquote><p>例如：svn merge -r 200:205 test.php（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下）</p></blockquote><hr><hr><h2 id="一、将文件checkout到本地目录"><a href="#一、将文件checkout到本地目录" class="headerlink" title="一、将文件checkout到本地目录"></a>一、将文件checkout到本地目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn checkout path（path是服务器上的目录）</span><br></pre></td></tr></table></figure><blockquote><p>例如：svn checkout svn://192.168.1.1/pro/domain</p></blockquote><p>简写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn co</span><br></pre></td></tr></table></figure><h2 id="二、往版本库中添加新的文件"><a href="#二、往版本库中添加新的文件" class="headerlink" title="二、往版本库中添加新的文件"></a>二、往版本库中添加新的文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn add file</span><br></pre></td></tr></table></figure><blockquote><p>例如：svn add test.php(添加test.php)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn add *.php(添加当前目录下所有的php文件)</span><br></pre></td></tr></table></figure><h2 id="三、将改动的文件提交到版本库"><a href="#三、将改动的文件提交到版本库" class="headerlink" title="三、将改动的文件提交到版本库"></a>三、将改动的文件提交到版本库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn commit -m &quot;LogMessage&quot; [-N] [--no-unlock] PATH(如果选择了保持锁，就使用--no-unlock开关)</span><br></pre></td></tr></table></figure><blockquote><p>例如：svn commit -m “add test file for my test” test.php</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">简写：svn ci</span><br></pre></td></tr></table></figure><h2 id="四、加锁-解锁"><a href="#四、加锁-解锁" class="headerlink" title="四、加锁/解锁"></a>四、加锁/解锁</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn lock -m &quot;LockMessage&quot; [--force] PATH</span><br></pre></td></tr></table></figure><blockquote><p>例如：svn lock -m “lock test file” test.php</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn unlock PATH</span><br></pre></td></tr></table></figure><h2 id="五、更新到某个版本"><a href="#五、更新到某个版本" class="headerlink" title="五、更新到某个版本"></a>五、更新到某个版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn update -r m path</span><br></pre></td></tr></table></figure><p>例如:</p><ul><li>svn update如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。</li><li>svn update -r 200 test.php(将版本库中的文件test.php还原到版本200)</li><li>svn update test.php(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先update，修改文件，然后清除svn resolved，最后再提交commit)</li></ul><p>简写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn up</span><br></pre></td></tr></table></figure><h2 id="六、查看文件或者目录状态"><a href="#六、查看文件或者目录状态" class="headerlink" title="六、查看文件或者目录状态"></a>六、查看文件或者目录状态</h2><ul><li>svn status path（目录下的文件和子目录的状态，正常状态不显示）</li></ul><blockquote><p>?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定</p></blockquote><ul><li>svn status -v path(显示文件和子目录状态)<ul><li>第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。</li></ul></li></ul><blockquote><p>注：svn status、svn diff和 svn revert这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝。</p></blockquote><p>简写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn st</span><br></pre></td></tr></table></figure><h2 id="七、删除文件"><a href="#七、删除文件" class="headerlink" title="七、删除文件"></a>七、删除文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn delete path -m &quot;delete test fle&quot;</span><br></pre></td></tr></table></figure><blockquote><p>例如：svn delete svn://192.168.1.1/pro/domain/test.php -m “delete test file”或者直接svn delete test.php 然后再svn ci -m ‘delete test file‘，推荐使用这种</p></blockquote><p>简写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn (del, remove, rm)</span><br></pre></td></tr></table></figure><h2 id="八、查看日志"><a href="#八、查看日志" class="headerlink" title="八、查看日志"></a>八、查看日志</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn log path</span><br></pre></td></tr></table></figure><blockquote><p>例如：svn log test.php 显示这个文件的所有修改记录，及其版本号的变化</p></blockquote><h1 id="九、查看文件详细信息"><a href="#九、查看文件详细信息" class="headerlink" title="九、查看文件详细信息"></a>九、查看文件详细信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn info path</span><br></pre></td></tr></table></figure><blockquote><p>例如：svn info test.php</p></blockquote><h2 id="十、比较差异"><a href="#十、比较差异" class="headerlink" title="十、比较差异"></a>十、比较差异</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn diff path(将修改的文件与基础版本比较)</span><br></pre></td></tr></table></figure><blockquote><p>例如：svn diff test.php</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn diff -r m:n path(对版本m和版本n比较差异)</span><br></pre></td></tr></table></figure><blockquote><p>例如：svn diff -r 200:201 test.php</p></blockquote><p>简写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn di</span><br></pre></td></tr></table></figure><h2 id="十一、将两个版本之间的差异合并到当前文件"><a href="#十一、将两个版本之间的差异合并到当前文件" class="headerlink" title="十一、将两个版本之间的差异合并到当前文件"></a>十一、将两个版本之间的差异合并到当前文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn merge -r m:n path</span><br></pre></td></tr></table></figure><blockquote><p>例如：svn merge -r 200:205 test.php（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下）</p></blockquote><h2 id="十二、SVN-帮助"><a href="#十二、SVN-帮助" class="headerlink" title="十二、SVN 帮助"></a>十二、SVN 帮助</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svn help</span><br><span class="line">svn help ci</span><br></pre></td></tr></table></figure><p><strong>以上是常用命令，下面写几个不经常用的</strong></p><h2 id="十三、版本库下的文件和目录列表"><a href="#十三、版本库下的文件和目录列表" class="headerlink" title="十三、版本库下的文件和目录列表"></a>十三、版本库下的文件和目录列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn list path 显示path目录下的所有属于版本库的文件和目录</span><br></pre></td></tr></table></figure><p>简写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn ls</span><br></pre></td></tr></table></figure><h2 id="十四、创建纳入版本控制下的新目录"><a href="#十四、创建纳入版本控制下的新目录" class="headerlink" title="十四、创建纳入版本控制下的新目录"></a>十四、创建纳入版本控制下的新目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn mkdir: 创建纳入版本控制下的新目录。</span><br></pre></td></tr></table></figure><ul><li><p>用法: </p><ol><li>mkdir PATH…</li><li>mkdir URL…</li></ol></li><li><p>创建版本控制的目录。</p><ol><li>每一个以工作副本 PATH 指定的目录，都会创建在本地端，并且加入新增调度，以待下一次的提交。</li><li>每个以URL指定的目录，都会透过立即提交于仓库中创建。在这两个情况下，所有的中间目录都必须事先存在。</li></ol></li></ul><h2 id="十五、恢复本地修改"><a href="#十五、恢复本地修改" class="headerlink" title="十五、恢复本地修改"></a>十五、恢复本地修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn revert: 恢复原始未改变的工作副本文件 (恢复大部份的本地修改)。</span><br></pre></td></tr></table></figure><ul><li>revert:用法: <ul><li>revert PATH…</li></ul></li></ul><blockquote><p>注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复被删除的目录</p></blockquote><h2 id="十六、代码库URL变更"><a href="#十六、代码库URL变更" class="headerlink" title="十六、代码库URL变更"></a>十六、代码库URL变更</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn switch (sw): 更新工作副本至不同的URL。</span><br></pre></td></tr></table></figure><ul><li>用法: <ol><li>switch URL [PATH]</li><li>switch –relocate FROM TO [PATH…]<ol><li>更新你的工作副本，映射到一个新的URL，其行为跟“svn update”很像，也会将服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的方法。</li><li>改写工作副本的URL元数据，以反映单纯的URL上的改变。当仓库的根URL变动 (比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用这个命令更新工作副本与仓库的对应关系。</li></ol></li></ol></li></ul><h2 id="十七、解决冲突"><a href="#十七、解决冲突" class="headerlink" title="十七、解决冲突"></a>十七、解决冲突</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn resolved: 移除工作副本的目录或文件的“冲突”状态。</span><br></pre></td></tr></table></figure><ul><li>用法: <ul><li>resolved PATH…</li></ul></li></ul><blockquote><p>注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的相关文件，然后让 PATH 可以再次提交。</p></blockquote><h2 id="十八、输出指定文件或URL的内容。"><a href="#十八、输出指定文件或URL的内容。" class="headerlink" title="十八、输出指定文件或URL的内容。"></a>十八、输出指定文件或URL的内容。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svn cat 目标[@版本]...如果指定了版本，将从指定的版本开始查找。</span><br><span class="line">svn cat -r PREV filename &gt; filename (PREV 是上一版本,也可以写具体版本号,这样输出结果是可以提交的)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-查看当前文件下修改&quot;&gt;&lt;a href=&quot;#一-查看当前文件下修改&quot; class=&quot;headerlink&quot; title=&quot;一. 查看当前文件下修改&quot;&gt;&lt;/a&gt;一. 查看当前文件下修改&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;svn status&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;二-提交当前文件夹下修改文件&quot;&gt;&lt;a href=&quot;#二-提交当前文件夹下修改文件&quot; class=&quot;headerlink&quot; title=&quot;二. 提交当前文件夹下修改文件&quot;&gt;&lt;/a&gt;二. 提交当前文件夹下修改文件&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a. svn ci -m &amp;quot;还原confi.h文件 &amp;quot; Additions/heads/Config.h (单个文件)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b. svn ci -m “添加多个文件 “空格” 间隔  text1.h  text2.h (多个文件)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="http://yoursite.com/2016/06/16/markdown/"/>
    <id>http://yoursite.com/2016/06/16/markdown/</id>
    <published>2016-06-16T01:21:59.000Z</published>
    <updated>2019-03-27T01:12:11.044Z</updated>
    
    <content type="html"><![CDATA[<p>markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p><a id="more"></a><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><ul><li><strong>加粗</strong></li></ul><p>要加粗的文字左右分别用两个*号包起来</p><ul><li><em>斜体</em></li></ul><p>要倾斜的文字左右分别用一个*号包起来</p><ul><li><strong><em>斜体加粗</em></strong></li></ul><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><ul><li><del>删除线</del></li></ul><p>要加删除线的文字左右分别用两个~~号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>效果如下：<br>可以看到，显示效果是一样的。</p><hr><hr><hr><hr><h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</span><br><span class="line">u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" title="区块链"></p><p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p><h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[简书](http://jianshu.com)</span><br><span class="line">[百度](http://baidu.com)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><p>注：markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;</span><br><span class="line">例</span><br><span class="line">&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="超链接地址" target="_blank">超链接名</a><br>例<br><a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank">简书</a></p><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><ul><li><strong>无序列表</strong></li></ul><p>语法：<br>无序列表用 - + * 任何一种都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li><strong>有序列表</strong></li></ul><p>语法：<br>数字加点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><ul><li><strong>列表嵌套</strong></li></ul><p><strong>上一级和下一级之间敲三个空格即可</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+ 一级无序列表内容</span><br><span class="line">   + 二级无序列表内容</span><br><span class="line">   + 二级无序列表内容</span><br><span class="line">   + 二级无序列表内容</span><br><span class="line">+ 一级无序列表内容</span><br><span class="line">   1. 二级有序列表内容</span><br><span class="line">   2. 二级有序列表内容</span><br><span class="line">   3. 二级有序列表内容</span><br><span class="line">1. 一级有序列表内容</span><br><span class="line">   + 二级无序列表内容</span><br><span class="line">   + 二级无序列表内容</span><br><span class="line">   + 二级无序列表内容</span><br><span class="line">2. 一级有序列表内容</span><br><span class="line">   1. 二级有序列表内容</span><br><span class="line">   2. 二级有序列表内容</span><br><span class="line">   3. 二级有序列表内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>一级无序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级无序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><ol><li>一级有序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级有序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ol><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>姓名</th><th style="text-align:center">技能</th><th style="text-align:right">排行</th></tr></thead><tbody><tr><td>刘备</td><td style="text-align:center">哭</td><td style="text-align:right">大哥</td></tr><tr><td>关羽</td><td style="text-align:center">打</td><td style="text-align:right">二哥</td></tr><tr><td>张飞</td><td style="text-align:center">骂</td><td style="text-align:right">三弟</td></tr></tbody></table><h2 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h2><p>语法：</p><p>单行代码：代码之间分别用一个反引号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`代码内容`</span><br></pre></td></tr></table></figure><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(```)</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure><blockquote><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p></blockquote><p>示例：</p><p>单行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`create database hero;`</span><br></pre></td></tr></table></figure><p>代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(```)</span><br><span class="line">    function fun()&#123;</span><br><span class="line">         echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>单行代码</p><p><code>create database hero;</code></p><p>代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">     echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。&lt;/p&gt;
&lt;h2 id=&quot;一、标题&quot;&gt;&lt;a href=&quot;#一、标题&quot; class=&quot;headerlink&quot; title=&quot;一、标题&quot;&gt;&lt;/a&gt;一、标题&lt;/h2&gt;&lt;p&gt;在想要设置为标题的文字前面加#来表示&lt;br&gt;一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。&lt;/p&gt;
&lt;p&gt;注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>cocoaPods的使用</title>
    <link href="http://yoursite.com/2016/05/19/cocoaPods/"/>
    <id>http://yoursite.com/2016/05/19/cocoaPods/</id>
    <published>2016-05-19T06:21:59.000Z</published>
    <updated>2019-03-27T01:12:10.360Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、什么是CocoaPods"><a href="#一、什么是CocoaPods" class="headerlink" title="一、什么是CocoaPods"></a>一、什么是CocoaPods</h3><p>每种语言发展到一个阶段，就会出现相应的依赖管理工具，例如 Java 语言的 Maven，nodejs 的 npm。随着 iOS 开发者的增多，业界也出现了为 iOS 程序提供依赖管理的工具，它的名字叫做：CocoaPods。<br><a id="more"></a><br>CocoaPods项目的源码 在 Github 上管理。该项目开始于 2011 年 8 月 12 日，经过多年发展，现在已经成为 iOS 开发事实上的依赖管理标准工具。开发 iOS 项目不可避免地要使用第三方开源库，CocoaPods 的出现使得我们可以节省设置和更新第三方开源库的时间。</p><h3 id="二、为什么要使用CocoaPods"><a href="#二、为什么要使用CocoaPods" class="headerlink" title="二、为什么要使用CocoaPods"></a>二、为什么要使用CocoaPods</h3><p>在使用CocoaPods之前，开发项目需要用到第三方开源库的时候，我们需要</p><p>1.把开源库的源代码复制到项目中</p><p>2.添加一些依赖框架和动态库</p><p>3.设置-ObjC，-fno-objc-arc等参数</p><p>4.管理他们的更新</p><p>在使用CocoaPods后，我们只需要把用到的开源库放到一个名为Podfile的文件中，然后执行pod install就可以了，Cocoapods就会自动将这些第三方开源库的源码下载下来，并且为我们的工程设置好响应的系统依赖和编译参数。</p><h3 id="三、CocoaPods的原理"><a href="#三、CocoaPods的原理" class="headerlink" title="三、CocoaPods的原理"></a>三、CocoaPods的原理</h3><p>CocoaPods的原理是将所有的依赖库都放到另一个名为Pods的项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。</p><h3 id="四、CocoaPods的安装"><a href="#四、CocoaPods的安装" class="headerlink" title="四、CocoaPods的安装"></a>四、CocoaPods的安装</h3><h4 id="1-设置ruby的软件源"><a href="#1-设置ruby的软件源" class="headerlink" title="1. 设置ruby的软件源"></a>1. 设置ruby的软件源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources -l #(查看当前ruby的源)</span><br><span class="line"></span><br><span class="line">$ gem sources --remove https://rubygems.org/ #(移除当前ruby的源)</span><br><span class="line"></span><br><span class="line">$ gem sources -a https://gems.ruby-china.org/(原来的淘宝镜像 https://ruby.taobao.org/已经不能用了)</span><br><span class="line"></span><br><span class="line">$ gem sources -l #(再次查看当前ruby的源)</span><br></pre></td></tr></table></figure><p>如果Terminal输出：  </p><p><strong><em> CURRENT SOURCES </em></strong>  </p><p><a href="https://gems.ruby-china.org/" target="_blank" rel="noopener">https://gems.ruby-china.org/</a></p><p>可以用gem sources -l 来检查使用替换镜像位置成功，结果应该只有 <a href="https://gems.ruby-china.org/" target="_blank" rel="noopener">https://gems.ruby-china.org/</a> 才对。</p><p>就证明ruby的软件源已经设置OK了。</p><h4 id="2-设置gem为最新版本"><a href="#2-设置gem为最新版本" class="headerlink" title="2. 设置gem为最新版本"></a>2. 设置gem为最新版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gem update --system</span><br></pre></td></tr></table></figure><p>升级成功后会提示: Latest version currently installed. Aborting.</p><h4 id="3-执行安装CocoaPods命令"><a href="#3-执行安装CocoaPods命令" class="headerlink" title="3. 执行安装CocoaPods命令"></a>3. 执行安装CocoaPods命令</h4><blockquote><p>$ sudo gem install cocoapods　　　　　　　　　　　  // Mac  OS X 10.11前  输入这一条<br> $ sudo gem install -n /usr/local/bin cocoapods  //Mac OS X 10.11后   输入这一条</p></blockquote><p>成功后</p><blockquote><p>$ pod setup</p></blockquote><p> 这条命令是将Github上的开源库都托管都安装Podspec索引安装到到本 地,</p><p> 这一步,</p><p> 很慢…..</p><p> 很慢……….</p><p> 很慢……………</p><p> 大约要下载200M的文件,偏偏下载速度出奇的慢,本人保持在30K/S,大约2个小时,关键是没有任何进度条显示,就这样傻乎乎的卡死在这里</p><h3 id="五、Cocoapods的使用"><a href="#五、Cocoapods的使用" class="headerlink" title="五、Cocoapods的使用"></a>五、Cocoapods的使用</h3><h4 id="1-引入第三方库到项目中"><a href="#1-引入第三方库到项目中" class="headerlink" title="1. 引入第三方库到项目中"></a>1. 引入第三方库到项目中</h4><ul><li><p>创建一个工程，并创建podfile配置文件</p></li><li><p>先用cd进入到工程中去<br>输入指令vim podfile创建podfile文件，然后按i进入到编辑模式<br>配置文件固定语句如下：</p></li></ul> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">platform :ios, &apos;8.0&apos;</span><br><span class="line">target &apos;TargetName&apos; do</span><br><span class="line">pod &apos;AFNetworking&apos;, &apos;~&gt; 3.0&apos;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li>然后按esc，接着按” : “ 然后输入wq 按回车键 返回终端界面，</li><li><p>输入终端命令 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod install</span><br></pre></td></tr></table></figure></li></ul><p>意思是初始化，所以每次添加新的库的时候，之前的指令都不能删除，它只会添加指令中有的库。</p><ul><li>如果发现安装cocoapods之后，初始化pod时在receive object是正常情况 需要耐心等待。</li></ul><h4 id="2-更新CocoaPods中的第三方们。"><a href="#2-更新CocoaPods中的第三方们。" class="headerlink" title="2. 更新CocoaPods中的第三方们。"></a>2. 更新CocoaPods中的第三方们。</h4><ul><li>第三方库们都有人在维护升级，我们需要隔断时间就要更新下我们工程中第三方库的版本。只需要终端输入命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod update</span><br></pre></td></tr></table></figure><p>就可以了。</p><ul><li>如果遇到pod<br>install或者pod update慢的问题，原因在于当执行以上两个命令的时候会升级CocoaPods的spec仓库，加一个参数可以省略这一步，然后速度就会提升不少。加参数的命令如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pod install --verbose --no-repo-update</span><br><span class="line">$ pod update --verbose --no-repo-update</span><br></pre></td></tr></table></figure><h4 id="3-删除CocoaPods中的某些第三方们。"><a href="#3-删除CocoaPods中的某些第三方们。" class="headerlink" title="3. 删除CocoaPods中的某些第三方们。"></a>3. 删除CocoaPods中的某些第三方们。</h4><p>当我们需要去掉某个第三方库时，只需要在Podfile删除该引入该库的语句，然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod update或者 $ pod install</span><br></pre></td></tr></table></figure><p>就可以了。</p><h4 id="4-将CocoaPods从项目中删除"><a href="#4-将CocoaPods从项目中删除" class="headerlink" title="4. 将CocoaPods从项目中删除"></a>4. 将CocoaPods从项目中删除</h4><p>如果你在以后的使用过程中不想用CocoaPods了怎么办？很简单，把多出来的东西们都删掉就可以了，不过为了项目正常运行，你需要手动导入已经使用的第三方们哦。</p><h4 id="5-升级CocoaPods"><a href="#5-升级CocoaPods" class="headerlink" title="5. 升级CocoaPods"></a>5. 升级CocoaPods</h4><p>升级CocoaPods版本的命令和安装CocoaPods的命令一样，都是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gem install cocoapods。</span><br></pre></td></tr></table></figure><p>如果老版本升级cocoapods的时候提示<code>Operation not permitted - /usr/bin/xcodeproj</code>，改用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gem install -n /usr/local/bin cocoapods --pre</span><br></pre></td></tr></table></figure><p>就可以了。</p><h4 id="6-卸载CocoaPods"><a href="#6-卸载CocoaPods" class="headerlink" title="6. 卸载CocoaPods"></a>6. 卸载CocoaPods</h4><p>卸载CocoaPods的命令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gem uninstall cocoapods</span><br></pre></td></tr></table></figure><h3 id="六、-文章的最后附上一些常用指令"><a href="#六、-文章的最后附上一些常用指令" class="headerlink" title="六、 文章的最后附上一些常用指令"></a>六、 文章的最后附上一些常用指令</h3><h4 id="1-pod安装"><a href="#1-pod安装" class="headerlink" title="1. pod安装"></a>1. pod安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 添加源</span><br><span class="line">$ sudo gem sources -a https://ruby.taobao.org/</span><br><span class="line"># 删除源</span><br><span class="line">$ sudo gem sources -r https://rubygems.org/</span><br><span class="line"># 安装</span><br><span class="line">$ sudo gem install cocoapods</span><br><span class="line"># 设置</span><br><span class="line">$ pod setup</span><br></pre></td></tr></table></figure><h4 id="2-gem常用命令"><a href="#2-gem常用命令" class="headerlink" title="2. gem常用命令"></a>2. gem常用命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 查看版本</span><br><span class="line">$ gem --version</span><br><span class="line"># 清除过期的gem</span><br><span class="line">$ sudo gem cleanup</span><br><span class="line"># 安装包</span><br><span class="line">$ sudo gem install cocoapods</span><br><span class="line"># 删除包</span><br><span class="line">$ gem uninstall cocoapods</span><br><span class="line"># 更新包</span><br><span class="line">$ sudo gem update</span><br><span class="line"># 列出本地安装的包</span><br><span class="line">$ gem list</span><br></pre></td></tr></table></figure><h4 id="3-pod命令"><a href="#3-pod命令" class="headerlink" title="3. pod命令"></a>3. pod命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 第一次使用安装框架    //只用安装一次,之后使用 添加删除都用 pod update --no-repo-update </span><br><span class="line">$ pod install</span><br><span class="line"># 安装框架，不更新本地索引，速度快</span><br><span class="line">$ pod install --no-repo-update </span><br><span class="line"># 今后升级、添加、删除框架，或者框架不好用</span><br><span class="line">$ pod update</span><br><span class="line"># 更新框架，不更新本地索引，速度快</span><br><span class="line">$ pod update --no-repo-update </span><br><span class="line"># 搜索框架</span><br><span class="line">$ pod search XXX# </span><br><span class="line">帮助</span><br><span class="line">$ pod --help</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、什么是CocoaPods&quot;&gt;&lt;a href=&quot;#一、什么是CocoaPods&quot; class=&quot;headerlink&quot; title=&quot;一、什么是CocoaPods&quot;&gt;&lt;/a&gt;一、什么是CocoaPods&lt;/h3&gt;&lt;p&gt;每种语言发展到一个阶段，就会出现相应的依赖管理工具，例如 Java 语言的 Maven，nodejs 的 npm。随着 iOS 开发者的增多，业界也出现了为 iOS 程序提供依赖管理的工具，它的名字叫做：CocoaPods。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="cocoaPods" scheme="http://yoursite.com/tags/cocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://yoursite.com/2016/05/09/git/"/>
    <id>http://yoursite.com/2016/05/09/git/</id>
    <published>2016-05-09T02:33:04.000Z</published>
    <updated>2019-03-27T01:12:10.903Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="源代码管理工具-GIT"><a href="#源代码管理工具-GIT" class="headerlink" title="源代码管理工具-GIT"></a>源代码管理工具-GIT</h2><h2 id="一-git-概述"><a href="#一-git-概述" class="headerlink" title="一. git 概述"></a>一. git 概述</h2><h3 id="1-git-简介"><a href="#1-git-简介" class="headerlink" title="1. git 简介?"></a>1. git 简介?</h3><ol><li><p>什么是git?  </p><blockquote><p>git是一款开源的分布式版本控制工具<br>在世界上所有的分布式版本控制工具中，git是最快、最简单、最流行的</p><a id="more"></a></blockquote></li><li><p>git的起源?</p><blockquote><p>作者是Linux之父：Linus Benedict Torvalds<br>当初开发git仅仅是为了辅助Linux内核的开发（管理源代码）</p></blockquote></li><li><p>git的现状?</p><blockquote><p>在国外已经非常普及，国内并未普及（在慢慢普及）<br>越来越多的开源项目已经转移到git</p></blockquote></li></ol><h3 id="2-常见的源代码管理工具有哪些"><a href="#2-常见的源代码管理工具有哪些" class="headerlink" title="2. 常见的源代码管理工具有哪些?"></a>2. 常见的源代码管理工具有哪些?</h3><ul><li><p>CVS</p><ul><li>开启版本控制之门</li><li>1990年诞生，“远古时代”的主流源代码管理工具</li></ul></li><li><p>SVN</p><ul><li>全称是Subversion，集中式版本控制之王者</li><li>是CVS的接班人，速度比CVS快，功能比CVS多且强大</li><li>在国内软件企业中使用最为普遍（70%-90%）</li></ul></li><li><p>ClearCase</p><ul><li>收费的集中式版本控制工具，安装比Windows还大，运行比蜗牛还慢</li><li>能用ClearCase的一般是世界500强，他们有个共同的特点是财大气粗或者人傻钱多</li></ul></li><li><p>VSS</p><ul><li>微软的集中式版本控制工具，集成在Visual Studio中</li></ul></li></ul><h3 id="3-集中式版本控制"><a href="#3-集中式版本控制" class="headerlink" title="3. 集中式版本控制"></a>3. 集中式版本控制</h3><p>所有的代码都集中在一块, 统一进行管理 </p><h3 id="4-分布式版本控制"><a href="#4-分布式版本控制" class="headerlink" title="4. 分布式版本控制"></a>4. 分布式版本控制</h3><p>在每个客户端都有一份完整的代码仓库, 可以在每个客户端自行管理</p><h3 id="5-git-和-svn的简单对比"><a href="#5-git-和-svn的简单对比" class="headerlink" title="5. git 和 svn的简单对比"></a>5. git 和 svn的简单对比</h3><ul><li><p>速度</p><blockquote><p>在很多情况下，git的速度远远比SVN快</p></blockquote></li><li><p>结构</p><blockquote><p>SVN是集中式管理，git是分布式管理</p></blockquote></li><li><p>其他</p><blockquote><p>SVN使用分支比较笨拙，git可以轻松拥有无限个分支</p></blockquote><blockquote><p>SVN必须联网才能正常工作，git支持本地版本控制工作</p></blockquote><blockquote><p>旧版本的SVN会在每一个目录置放一个.svn，git只会在根目录拥有一个.git</p></blockquote></li></ul><h3 id="6-SVN工作流程和GIT工作流程对比"><a href="#6-SVN工作流程和GIT工作流程对比" class="headerlink" title="6. SVN工作流程和GIT工作流程对比"></a>6. SVN工作流程和GIT工作流程对比</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ svn checkout —— git clone</span><br><span class="line">    svn 只下载代码， git 会连同代码仓库一起下载下来</span><br><span class="line"></span><br><span class="line">$ svn commit —— git commit</span><br><span class="line">    svn 是提交到服务器，git 中是提交到本地仓库，需要使用push才能提交到服务器</span><br><span class="line"></span><br><span class="line">$ svn update —— git pull</span><br><span class="line">    都是从服务器下载最新被修改的代码</span><br></pre></td></tr></table></figure><p>分布式和集中式最大的区别在于：在分布式下，本地有个代码仓库,开发者可以在本地提交; 而集中式版本控制, 只有在服务器才有一个代码仓库, 只能在服务器进行统一管理</p><h3 id="7-git工作原理"><a href="#7-git工作原理" class="headerlink" title="7. git工作原理"></a>7. git工作原理</h3><ol><li>概念理解</li></ol><ul><li><p>工作区</p><blockquote><p>与.git文件夹同级的其他文件夹或者子文件夹</p></blockquote></li><li><p>版本控制库</p><blockquote><p>暂缓区  </p></blockquote><blockquote><p>分支(Git不像SVN那样有主干和分支的概念. 仅仅存在分支,其中master分支为默认被创建的分支,类似于SVN中的主干) </p></blockquote><blockquote><p>切换分支:通过控制HEAD指针指向不同的分支,就可以切换</p></blockquote></li></ul><p>操作原则: 所有新添加/删除/修改的文件 必须先添加到暂缓区,然后才能提交到HEAD指向的当前分支中</p><h3 id="8-git使用环境"><a href="#8-git使用环境" class="headerlink" title="8. git使用环境"></a>8. git使用环境</h3><ol><li><p>单人开发只需要一个本地库</p><blockquote><p>原因:不需要与他人共享代码,只负责管理自己代码即可;例如提交代码,删除代码,版本控制等等</p></blockquote></li><li><p>多人开发时需要一个共享版本库</p><blockquote><p>共享版本库的形式:<br>  本地共享库:文件夹/U盘/硬盘<br>  远程共享库:自己搭建git服务器/ 托管到第三方平台(例如github, oschina)</p></blockquote></li><li><p>使用环境 </p><blockquote><p>无论是单人开发还是多人开发,客户端都可以使用命令行或者图形界面使用git</p></blockquote></li></ol><ul><li><p>SourceTree</p><blockquote><p>下载地址：<a href="http://www.sourcetreeapp.com/download/" target="_blank" rel="noopener">http://www.sourcetreeapp.com/download/</a></p></blockquote></li></ul><ul><li><p>GitHub</p><blockquote><p>下载地址：<a href="https://mac.github.com" target="_blank" rel="noopener">https://mac.github.com</a><br>不过它是专门为GitHub网站而设计的</p></blockquote></li></ul><ul><li><p>Xcode</p><blockquote><p>虽然集成较好,但是只能做一些常用的简单操作,复杂操作还要使用命令行</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;源代码管理工具-GIT&quot;&gt;&lt;a href=&quot;#源代码管理工具-GIT&quot; class=&quot;headerlink&quot; title=&quot;源代码管理工具-GIT&quot;&gt;&lt;/a&gt;源代码管理工具-GIT&lt;/h2&gt;&lt;h2 id=&quot;一-git-概述&quot;&gt;&lt;a href=&quot;#一-git-概述&quot; class=&quot;headerlink&quot; title=&quot;一. git 概述&quot;&gt;&lt;/a&gt;一. git 概述&lt;/h2&gt;&lt;h3 id=&quot;1-git-简介&quot;&gt;&lt;a href=&quot;#1-git-简介&quot; class=&quot;headerlink&quot; title=&quot;1. git 简介?&quot;&gt;&lt;/a&gt;1. git 简介?&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;什么是git?  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git是一款开源的分布式版本控制工具&lt;br&gt;在世界上所有的分布式版本控制工具中，git是最快、最简单、最流行的&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="http://yoursite.com/2016/05/06/creatHexo/"/>
    <id>http://yoursite.com/2016/05/06/creatHexo/</id>
    <published>2016-05-06T07:01:40.000Z</published>
    <updated>2019-03-27T01:12:10.598Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Hexo搭建个人博客"><a href="#Hexo搭建个人博客" class="headerlink" title="Hexo搭建个人博客"></a>Hexo搭建个人博客</h2><blockquote><p>Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.</p></blockquote><p>大致解释是:Hexo是一个快速，简单和强大的博客框架。你写的Markdown（或其他语言）的帖子Hexo在几秒钟内就能生成静态文件;<br><a id="more"></a></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>安装Hexo非常容易。但是，你需要先安装几个其他的东西：</p><p><code>Node.js</code><br>作用：用来生成静态页面的 到Node.js官网下载相应平台的最新版本，一路安装即可。官网入口  </p><p><code>Github账号</code><br>作用：用来做博客的远程创库、域名、静态资源服务器。怎么申请github的账号和ssh key等,请大家自行搜索,网络上资源还是很丰富的。</p><h2 id="关联Github"><a href="#关联Github" class="headerlink" title="关联Github"></a>关联Github</h2><h2 id="添加ssh-key到Github"><a href="#添加ssh-key到Github" class="headerlink" title="添加ssh key到Github"></a>添加ssh key到Github</h2><h2 id="检查SSH-keys是否存在Github"><a href="#检查SSH-keys是否存在Github" class="headerlink" title="检查SSH keys是否存在Github"></a>检查SSH keys是否存在Github</h2><p>执行如下命令，检查SSH keys是否存在。如果有文件<code>id_rsa.pub</code>或<code>id_dsa.pub</code>，则直接进入步骤1.3将SSH key添加到Github中，否则进入下一步生成SSH key。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br></pre></td></tr></table></figure><h2 id="生成新的ssh-key"><a href="#生成新的ssh-key" class="headerlink" title="生成新的ssh key"></a>生成新的ssh key</h2><p>执行如下命令生成public/private rsa key pair，注意将<a href="mailto:`your_email@example.com" target="_blank" rel="noopener">`your_email@example.com</a>`换成你自己注册Github的邮箱地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>默认会在相应路径下（<code>~/.ssh/id_rsa.pub</code>）生成<code>id_rsa和id_rsa.pub</code>两个文件。</p><h2 id="将ssh-key添加到Github中"><a href="#将ssh-key添加到Github中" class="headerlink" title="将ssh key添加到Github中"></a>将ssh key添加到Github中</h2><p>Find前往文件夹<code>~/.ssh/id_rsa.pub</code>打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到Github的Add SSH key页面即可。  </p><p>进入Github –&gt; Settings –&gt; SSH keys –&gt; add SSH key:  </p><p>Title里任意添一个标题，将复制的内容粘贴到Key里，点击下方Add key绿色按钮即可。</p><h2 id="正式安装Hexo"><a href="#正式安装Hexo" class="headerlink" title="正式安装Hexo"></a>正式安装Hexo</h2><p>nodejs和git都安装好后，可执行如下命令安装hexo：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g hexo</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>创建一个文件夹，如：Blog，进入到Blog里分别执行init命令和安装依赖命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h2 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h2><p>继续再Blog目录下执行如下命令，生成静态页面:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate      或 hexo g</span><br></pre></td></tr></table></figure><h2 id="安装hexo-server插件"><a href="#安装hexo-server插件" class="headerlink" title="安装hexo-server插件"></a>安装hexo-server插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install hexo-server</span><br></pre></td></tr></table></figure><h2 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h2><p>启动本地服务，进行文章预览调试，命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server     或 hexo s</span><br></pre></td></tr></table></figure><p>浏览器输入localhost:4000进行预览博客网站,是不是很简陋呢,但是好歹有一个自己的家园了,也是很兴奋呢。但是现在都是在本地进行的,需要和github进行关联。</p><h2 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h2><p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法 然后建立关联,例如我的是:luojinghui.github.io,此时,你的目录应该是这样子:</p><blockquote><p>Blog<br>　｜<br>　｜－－ _config.yml<br>　｜－－ node_modules<br>　｜－－ public<br>　｜－－ source<br>　｜－－ db.json<br>　｜－－ package.json<br>　｜－－ scaffolds<br>　｜－－ themes  </p></blockquote><p>现在我们需要修改_config.yml文件，用编辑器打开,翻到最后,改成这个样子(注意冒号后面的空格):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/liyilian/liyilian.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>执行如下命才能使用git部署(只需要执行一次):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>执行这个命令进行部署:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>然后在浏览器中输入 <a href="http://liyilian.github.io" target="_blank" rel="noopener">http://liyilian.github.io</a> 就行了，我的 github 的账户叫 liyilian ,把这个改成你 github 的账户名就行了</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>每次部署的步骤，可按以下三步来进行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>简写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure><p>一些常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;postName&quot; #新建文章</span><br><span class="line">$ hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">$ hexo generate #生成静态页面至public目录</span><br><span class="line">$ hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭$ server）</span><br><span class="line">$ hexo deploy #将.deploy目录部署到GitHub</span><br><span class="line">$ hexo help  #查看帮助</span><br><span class="line">$ hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>这里面有很多主题,可以参考: <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网主题页</a></p><h2 id="图片路径"><a href="#图片路径" class="headerlink" title="图片路径"></a>图片路径</h2><p>1.文章在 source/_posts下新建以.md为结尾的文件，编辑器可以用Webstrom、Sublime，支持 markdown 语法<br>2.修改头像可以直接在主题里的 _config.yml 文件里面修改，友情链接，之类的都在这里<br>3.创建文章的文件开头格式,可以用我现用的格式去写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 填写标题</span><br><span class="line">tags: </span><br><span class="line">- tag1</span><br><span class="line">- tag2</span><br><span class="line">date: 2016/6/06 12:20:25</span><br><span class="line">reward: 是否支持打赏,填写true或者false</span><br><span class="line">keywords: 关键词1 关键词2...</span><br><span class="line">description: 填写描述</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>4.如果想引用本地图片路径,以根路径作为起始点,就可以了。例如: /img/logo.png<br>开始打理你的博客吧，有什么问题下面留言,我会回复的。</p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><blockquote><p>问：如何让文章想只显示一部分和一个 阅读全文 的按钮？<br>答：在文章中加一个 <code>&lt;!--more--&gt;</code> ， <code>&lt;!--more--&gt;</code> 后面的内容就不会显示出来了。</p></blockquote><hr><blockquote><p>问：如何添加多说评论?<br>答：在主题里的 _config.yml中找到<code>duoshuo:</code>,冒号后面填写你在多说申请用的域名,例如,我申请的是<code>liyilian.duoshuo.com</code>,那么,在这里就填写liyilian,就好了</p></blockquote><p>转载请注明原地址，liyilian的博客：<a href="https://liyilian.github.io/" target="_blank" rel="noopener">https://liyilian.github.io/</a> 谢谢！</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;Hexo搭建个人博客&quot;&gt;&lt;a href=&quot;#Hexo搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo搭建个人博客&quot;&gt;&lt;/a&gt;Hexo搭建个人博客&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大致解释是:Hexo是一个快速，简单和强大的博客框架。你写的Markdown（或其他语言）的帖子Hexo在几秒钟内就能生成静态文件;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="所有文章" scheme="http://yoursite.com/categories/%E6%89%80%E6%9C%89%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="搭建博客" scheme="http://yoursite.com/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="主题配置" scheme="http://yoursite.com/tags/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>runtime简介</title>
    <link href="http://yoursite.com/2016/05/05/runtime/"/>
    <id>http://yoursite.com/2016/05/05/runtime/</id>
    <published>2016-05-05T03:48:52.000Z</published>
    <updated>2019-03-27T01:12:11.639Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="一、runtime简介"><a href="#一、runtime简介" class="headerlink" title="一、runtime简介"></a>一、runtime简介</h2><ul><li>RunTime简称运行时。OC就是运行时机制，也就是在运行时候的一些机制，其中最主要的是消息机制。</li><li>对于C语言，函数的调用在编译的时候会决定调用哪个函数。</li><li>对于OC的函数，属于动态调用过程，在编译的时候并不能决定真正调用哪个函数，只有在真正运行的时候才会根据函数的名称找到对应的函数来调用。</li><li>事实证明：<ul><li>在编译阶段，OC可以调用任何函数，即使这个函数并未实现，只要声明过就不会报错。</li><li>在编译阶段，C语言调用未实现的函数就会报错。<a id="more"></a></li></ul></li></ul><h2 id="二、runtime作用"><a href="#二、runtime作用" class="headerlink" title="二、runtime作用"></a>二、runtime作用</h2><h3 id="1-发送消息"><a href="#1-发送消息" class="headerlink" title="1.发送消息"></a>1.发送消息</h3><ul><li>方法调用的本质，就是让对象发送消息。</li><li>objc_msgSend,只有对象才能发送消息，因此以objc开头.</li><li>使用消息机制前提，必须导入#import &lt;objc/message.h&gt;</li><li>消息机制简单使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 创建person对象</span><br><span class="line">Person *p = [[Person alloc] init];</span><br><span class="line"></span><br><span class="line">// 调用对象方法</span><br><span class="line">  [p eat];</span><br><span class="line"></span><br><span class="line">// 本质：让对象发送消息</span><br><span class="line">  objc_msgSend(p, @selector(eat));</span><br><span class="line"></span><br><span class="line">// 调用类方法的方式：两种</span><br><span class="line">// 第一种通过类名调用</span><br><span class="line">[Person eat];</span><br><span class="line">// 第二种通过类对象调用</span><br><span class="line">[[Person class] eat];</span><br><span class="line"></span><br><span class="line">// 用类名调用类方法，底层会自动把类名转换成类对象调用</span><br><span class="line">// 本质：让类对象发送消息</span><br><span class="line">  objc_msgSend([Person class], @selector(eat));</span><br></pre></td></tr></table></figure><ul><li>消息机制原理:对象根据方法编号SEL去映射表查找对应的方法实现</li></ul><h3 id="2-交换方法"><a href="#2-交换方法" class="headerlink" title="2.交换方法"></a>2.交换方法</h3><ul><li>开发使用场景:系统自带的方法功能不够，给系统自带的方法扩展一些功能，并且保持原有的功能。</li><li>方式一:继承系统的类，重写方法.</li><li>方式二:使用runtime,交换方法.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    // Do any additional setup after loading the view, typically from a nib.</span><br><span class="line">    // 需求：给imageNamed方法提供功能，每次加载图片就判断下图片是否加载成功。</span><br><span class="line">    // 步骤一：先搞个分类，定义一个能加载图片并且能打印的方法+ (instancetype)imageWithName:(NSString *)name;</span><br><span class="line">    // 步骤二：交换imageNamed和imageWithName的实现，就能调用imageWithName，间接调用imageWithName的实现。</span><br><span class="line">    UIImage *image = [UIImage imageNamed:@<span class="string">"123"</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation UIImage (Image)</span><br><span class="line">// 加载分类到内存的时候调用</span><br><span class="line">+ (void)load</span><br><span class="line">&#123;</span><br><span class="line">    // 交换方法</span><br><span class="line"></span><br><span class="line">    // 获取imageWithName方法地址</span><br><span class="line">    Method imageWithName = class_getClassMethod(self, @selector(imageWithName:));</span><br><span class="line"></span><br><span class="line">    // 获取imageWithName方法地址</span><br><span class="line">    Method imageName = class_getClassMethod(self, @selector(imageNamed:));</span><br><span class="line"></span><br><span class="line">    // 交换方法地址，相当于交换实现方式</span><br><span class="line">    method_exchangeImplementations(imageWithName, imageName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 不能在分类中重写系统方法imageNamed，因为会把系统的功能给覆盖掉，而且分类中不能调用super.</span><br><span class="line"></span><br><span class="line">// 既能加载图片又能打印</span><br><span class="line">+ (instancetype)imageWithName:(NSString *)name</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    // 这里调用imageWithName，相当于调用imageName</span><br><span class="line">    UIImage *image = [self imageWithName:name];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (image == nil) &#123;</span><br><span class="line">        NSLog(@<span class="string">"加载空的图片"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="3-动态添加方法"><a href="#3-动态添加方法" class="headerlink" title="3.动态添加方法"></a>3.动态添加方法</h3><ul><li>开发使用场景：如果一个类方法非常多，加载类到内存的时候也比较耗费资源，需要给每个方法生成映射表，可以使用动态给某个类，添加方法解决。</li><li>经典面试题：有没有使用performSelector，其实主要想问你有没有动态添加过方法。</li><li>简单使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    // Do any additional setup after loading the view, typically from a nib.</span><br><span class="line"></span><br><span class="line">    Person *p = [[Person alloc] init];</span><br><span class="line"></span><br><span class="line">    // 默认person，没有实现eat方法，可以通过performSelector调用，但是会报错。</span><br><span class="line">    // 动态添加方法就不会报错</span><br><span class="line">    [p performSelector:@selector(eat)];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line">// void(*)()</span><br><span class="line">// 默认方法都有两个隐式参数，</span><br><span class="line">void eat(id self,SEL sel)</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@<span class="string">"%@ %@"</span>,self,NSStringFromSelector(sel));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 当一个对象调用未实现的方法，会调用这个方法处理,并且会把对应的方法列表传过来.</span><br><span class="line">// 刚好可以用来判断，未实现的方法是不是我们想要动态添加的方法</span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sel == @selector(eat)) &#123;</span><br><span class="line">        // 动态添加eat方法</span><br><span class="line"></span><br><span class="line">        // 第一个参数：给哪个类添加方法</span><br><span class="line">        // 第二个参数：添加方法的方法编号</span><br><span class="line">        // 第三个参数：添加方法的函数实现（函数地址）</span><br><span class="line">        // 第四个参数：函数的类型，(返回值+参数类型) v:void @:对象-&gt;self :表示SEL-&gt;_cmd</span><br><span class="line">        class_addMethod(self, @selector(eat), eat, <span class="string">"v@:"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> [super resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="4-给分类添加属性"><a href="#4-给分类添加属性" class="headerlink" title="4.给分类添加属性"></a>4.给分类添加属性</h3><ul><li>原理：给一个类声明属性，其实本质就是给这个类添加关联，并不是直接把这个值的内存空间添加到类存空间。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    // Do any additional setup after loading the view, typically from a nib.</span><br><span class="line"></span><br><span class="line">    // 给系统NSObject类动态添加属性name</span><br><span class="line"></span><br><span class="line">    NSObject *objc = [[NSObject alloc] init];</span><br><span class="line">    objc.name = @<span class="string">"小码哥"</span>;</span><br><span class="line">    NSLog(@<span class="string">"%@"</span>,objc.name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 定义关联的key</span><br><span class="line">static const char *key = <span class="string">"name"</span>;</span><br><span class="line"></span><br><span class="line">@implementation NSObject (Property)</span><br><span class="line"></span><br><span class="line">- (NSString *)name</span><br><span class="line">&#123;</span><br><span class="line">    // 根据关联的key，获取关联的值。</span><br><span class="line">    <span class="built_in">return</span> objc_getAssociatedObject(self, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setName:(NSString *)name</span><br><span class="line">&#123;</span><br><span class="line">    // 第一个参数：给哪个对象添加关联</span><br><span class="line">    // 第二个参数：关联的key，通过这个key获取</span><br><span class="line">    // 第三个参数：关联的value</span><br><span class="line">    // 第四个参数:关联的策略</span><br><span class="line">    objc_setAssociatedObject(self, key, name, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="5-字典转模型"><a href="#5-字典转模型" class="headerlink" title="5.字典转模型"></a>5.字典转模型</h3><ul><li><p>设计模型：字典转模型的第一步</p><ul><li>模型属性，通常需要跟字典中的key一一对应</li><li>问题：一个一个的生成模型属性，很慢？</li><li>需求：能不能自动根据一个字典，生成对应的属性。</li><li>解决：提供一个分类，专门根据字典生成对应的属性字符串。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@implementation NSObject (Log)</span><br><span class="line"></span><br><span class="line">// 自动打印属性字符串</span><br><span class="line">+ (void)resolveDict:(NSDictionary *)dict&#123;</span><br><span class="line"></span><br><span class="line">   // 拼接属性字符串代码</span><br><span class="line">   NSMutableString *strM = [NSMutableString string];</span><br><span class="line"></span><br><span class="line">   // 1.遍历字典，把字典中的所有key取出来，生成对应的属性代码</span><br><span class="line">   [dict enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) &#123;</span><br><span class="line"></span><br><span class="line">       // 类型经常变，抽出来</span><br><span class="line">        NSString *<span class="built_in">type</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> ([obj isKindOfClass:NSClassFromString(@<span class="string">"__NSCFString"</span>)]) &#123;</span><br><span class="line">           <span class="built_in">type</span> = @<span class="string">"NSString"</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([obj isKindOfClass:NSClassFromString(@<span class="string">"__NSCFArray"</span>)])&#123;</span><br><span class="line">           <span class="built_in">type</span> = @<span class="string">"NSArray"</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([obj isKindOfClass:NSClassFromString(@<span class="string">"__NSCFNumber"</span>)])&#123;</span><br><span class="line">           <span class="built_in">type</span> = @<span class="string">"int"</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([obj isKindOfClass:NSClassFromString(@<span class="string">"__NSCFDictionary"</span>)])&#123;</span><br><span class="line">           <span class="built_in">type</span> = @<span class="string">"NSDictionary"</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       // 属性字符串</span><br><span class="line">       NSString *str;</span><br><span class="line">       <span class="keyword">if</span> ([<span class="built_in">type</span> containsString:@<span class="string">"NS"</span>]) &#123;</span><br><span class="line">           str = [NSString stringWithFormat:@<span class="string">"@property (nonatomic, strong) %@ *%@;"</span>,<span class="built_in">type</span>,key];</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           str = [NSString stringWithFormat:@<span class="string">"@property (nonatomic, assign) %@ %@;"</span>,<span class="built_in">type</span>,key];</span><br><span class="line">       &#125;</span><br><span class="line">       // 每生成属性字符串，就自动换行。</span><br><span class="line">       [strM appendFormat:@<span class="string">"\n%@\n"</span>,str];</span><br><span class="line"></span><br><span class="line">   &#125;];</span><br><span class="line">   // 把拼接好的字符串打印出来，就好了。</span><br><span class="line">   NSLog(@<span class="string">"%@"</span>,strM);</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   @end</span><br></pre></td></tr></table></figure><ul><li>字典转模型的方式一：KVC</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> @implementation Status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> + (instancetype)statusWithDict:(NSDictionary *)dict &#123;</span><br><span class="line">      Status *status = [[self alloc] init];</span><br><span class="line"></span><br><span class="line">      [status setValuesForKeysWithDictionary:dict];</span><br><span class="line"></span><br><span class="line">      return status;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>KVC字典转模型弊端：必须保证，模型中的属性和字典中的key一一对应。</p><ul><li>如果不一致，就会调用[<status 0x7fa74b545d60=""> setValue:forUndefinedKey:] 报key找不到的错。</status></li><li>分析:模型中的属性和字典的key不一一对应，系统就会调用setValue:forUndefinedKey:报错。</li><li>解决:重写对象的setValue:forUndefinedKey:,把系统的方法覆盖， 就能继续使用KVC，字典转模型了。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)setValue:(id)value forUndefinedKey:(NSString *)key</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>字典转模型的方式二：Runtime</p><ul><li>思路：利用运行时，遍历模型中所有属性，根据模型的属性名，去字典中查找key，取出对应的值，给模型的属性赋值。</li><li>步骤：提供一个NSObject分类，专门字典转模型，以后所有模型都可以通过这个分类转。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">   [super viewDidLoad];</span><br><span class="line">   // Do any additional setup after loading the view, typically from a nib.</span><br><span class="line"></span><br><span class="line">   // 解析Plist文件</span><br><span class="line">   NSString *filePath = [[NSBundle mainBundle] pathForResource:@&quot;status.plist&quot; ofType:nil];</span><br><span class="line"></span><br><span class="line">   NSDictionary *statusDict = [NSDictionary dictionaryWithContentsOfFile:filePath];</span><br><span class="line"></span><br><span class="line">   // 获取字典数组</span><br><span class="line">   NSArray *dictArr = statusDict[@&quot;statuses&quot;];</span><br><span class="line"></span><br><span class="line">   // 自动生成模型的属性字符串</span><br><span class="line">//    [NSObject resolveDict:dictArr[0][@&quot;user&quot;]];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   _statuses = [NSMutableArray array];</span><br><span class="line"></span><br><span class="line">   // 遍历字典数组</span><br><span class="line">   for (NSDictionary *dict in dictArr) &#123;</span><br><span class="line"></span><br><span class="line">       Status *status = [Status modelWithDict:dict];</span><br><span class="line"></span><br><span class="line">       [_statuses addObject:status];</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // 测试数据</span><br><span class="line">   NSLog(@&quot;%@ %@&quot;,_statuses,[_statuses[0] user]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation NSObject (Model)</span><br><span class="line"></span><br><span class="line">+ (instancetype)modelWithDict:(NSDictionary *)dict</span><br><span class="line">&#123;</span><br><span class="line">   // 思路：遍历模型中所有属性-》使用运行时</span><br><span class="line"></span><br><span class="line">   // 0.创建对应的对象</span><br><span class="line">   id objc = [[self alloc] init];</span><br><span class="line"></span><br><span class="line">   // 1.利用runtime给对象中的成员属性赋值</span><br><span class="line"></span><br><span class="line">   // class_copyIvarList:获取类中的所有成员属性</span><br><span class="line">   // Ivar：成员属性的意思</span><br><span class="line">   // 第一个参数：表示获取哪个类中的成员属性</span><br><span class="line">   // 第二个参数：表示这个类有多少成员属性，传入一个Int变量地址，会自动给这个变量赋值</span><br><span class="line">   // 返回值Ivar *：指的是一个ivar数组，会把所有成员属性放在一个数组中，通过返回的数组就能全部获取到。</span><br><span class="line">   /* 类似下面这种写法</span><br><span class="line"></span><br><span class="line">    Ivar ivar;</span><br><span class="line">    Ivar ivar1;</span><br><span class="line">    Ivar ivar2;</span><br><span class="line">    // 定义一个ivar的数组a</span><br><span class="line">    Ivar a[] = &#123;ivar,ivar1,ivar2&#125;;</span><br><span class="line"></span><br><span class="line">    // 用一个Ivar *指针指向数组第一个元素</span><br><span class="line">    Ivar *ivarList = a;</span><br><span class="line"></span><br><span class="line">    // 根据指针访问数组第一个元素</span><br><span class="line">    ivarList[0];</span><br><span class="line"></span><br><span class="line">    */</span><br><span class="line">   unsigned int count;</span><br><span class="line"></span><br><span class="line">   // 获取类中的所有成员属性</span><br><span class="line">   Ivar *ivarList = class_copyIvarList(self, &amp;count);</span><br><span class="line"></span><br><span class="line">   for (int i = 0; i &lt; count; i++) &#123;</span><br><span class="line">       // 根据角标，从数组取出对应的成员属性</span><br><span class="line">       Ivar ivar = ivarList[i];</span><br><span class="line"></span><br><span class="line">       // 获取成员属性名</span><br><span class="line">       NSString *name = [NSString stringWithUTF8String:ivar_getName(ivar)];</span><br><span class="line"></span><br><span class="line">       // 处理成员属性名-&gt;字典中的key</span><br><span class="line">       // 从第一个角标开始截取</span><br><span class="line">       NSString *key = [name substringFromIndex:1];</span><br><span class="line"></span><br><span class="line">       // 根据成员属性名去字典中查找对应的value</span><br><span class="line">       id value = dict[key];</span><br><span class="line"></span><br><span class="line">       // 二级转换:如果字典中还有字典，也需要把对应的字典转换成模型</span><br><span class="line">       // 判断下value是否是字典</span><br><span class="line">       if ([value isKindOfClass:[NSDictionary class]]) &#123;</span><br><span class="line">           // 字典转模型</span><br><span class="line">           // 获取模型的类对象，调用modelWithDict</span><br><span class="line">           // 模型的类名已知，就是成员属性的类型</span><br><span class="line"></span><br><span class="line">           // 获取成员属性类型</span><br><span class="line">          NSString *type = [NSString stringWithUTF8String:ivar_getTypeEncoding(ivar)];</span><br><span class="line">         // 生成的是这种@&quot;@\&quot;User\&quot;&quot; 类型 -》 @&quot;User&quot;  在OC字符串中 \&quot; -&gt; &quot;，\是转义的意思，不占用字符</span><br><span class="line">           // 裁剪类型字符串</span><br><span class="line">           NSRange range = [type rangeOfString:@&quot;\&quot;&quot;];</span><br><span class="line"></span><br><span class="line">          type = [type substringFromIndex:range.location + range.length];</span><br><span class="line"></span><br><span class="line">           range = [type rangeOfString:@&quot;\&quot;&quot;];</span><br><span class="line"></span><br><span class="line">           // 裁剪到哪个角标，不包括当前角标</span><br><span class="line">         type = [type substringToIndex:range.location];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           // 根据字符串类名生成类对象</span><br><span class="line">           Class modelClass = NSClassFromString(type);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           if (modelClass) &#123; // 有对应的模型才需要转</span><br><span class="line"></span><br><span class="line">               // 把字典转模型</span><br><span class="line">               value  =  [modelClass modelWithDict:value];</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       // 三级转换：NSArray中也是字典，把数组中的字典转换成模型.</span><br><span class="line">       // 判断值是否是数组</span><br><span class="line">       if ([value isKindOfClass:[NSArray class]]) &#123;</span><br><span class="line">           // 判断对应类有没有实现字典数组转模型数组的协议</span><br><span class="line">           if ([self respondsToSelector:@selector(arrayContainModelClass)]) &#123;</span><br><span class="line"></span><br><span class="line">               // 转换成id类型，就能调用任何对象的方法</span><br><span class="line">               id idSelf = self;</span><br><span class="line"></span><br><span class="line">               // 获取数组中字典对应的模型</span><br><span class="line">               NSString *type =  [idSelf arrayContainModelClass][key];</span><br><span class="line"></span><br><span class="line">               // 生成模型</span><br><span class="line">              Class classModel = NSClassFromString(type);</span><br><span class="line">               NSMutableArray *arrM = [NSMutableArray array];</span><br><span class="line">               // 遍历字典数组，生成模型数组</span><br><span class="line">               for (NSDictionary *dict in value) &#123;</span><br><span class="line">                   // 字典转模型</span><br><span class="line">                 id model =  [classModel modelWithDict:dict];</span><br><span class="line">                   [arrM addObject:model];</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               // 把模型数组赋值给value</span><br><span class="line">               value = arrM;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       if (value) &#123; // 有值，才需要给模型的属性赋值</span><br><span class="line">           // 利用KVC给模型中的属性赋值</span><br><span class="line">           [objc setValue:value forKey:key];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   return objc;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> @end</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;一、runtime简介&quot;&gt;&lt;a href=&quot;#一、runtime简介&quot; class=&quot;headerlink&quot; title=&quot;一、runtime简介&quot;&gt;&lt;/a&gt;一、runtime简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;RunTime简称运行时。OC就是运行时机制，也就是在运行时候的一些机制，其中最主要的是消息机制。&lt;/li&gt;
&lt;li&gt;对于C语言，函数的调用在编译的时候会决定调用哪个函数。&lt;/li&gt;
&lt;li&gt;对于OC的函数，属于动态调用过程，在编译的时候并不能决定真正调用哪个函数，只有在真正运行的时候才会根据函数的名称找到对应的函数来调用。&lt;/li&gt;
&lt;li&gt;事实证明：&lt;ul&gt;
&lt;li&gt;在编译阶段，OC可以调用任何函数，即使这个函数并未实现，只要声明过就不会报错。&lt;/li&gt;
&lt;li&gt;在编译阶段，C语言调用未实现的函数就会报错。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="runtime" scheme="http://yoursite.com/tags/runtime/"/>
    
  </entry>
  
</feed>
